{"ast":null,"code":"import _toConsumableArray from \"C:/pproject-files/new-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector, gridRowGroupingNameSelector } from '../rows';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\nimport { useGridRegisterFilteringMethod } from './useGridRegisterFilteringMethod';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel } from './gridFilterUtils';\nexport var filterStateInitializer = function filterStateInitializer(state, props, apiRef) {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  var filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport var useGridFilter = function useGridFilter(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useGridFilter');\n  var filteringMethodCollectionRef = React.useRef({});\n  var lastFilteringMethodApplied = React.useRef(null);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: GridEvents.filterModelChange\n  });\n  /**\n   * API METHODS\n   */\n\n  var applyFilters = React.useCallback(function () {\n    apiRef.current.setState(function (state) {\n      var rowGroupingName = gridRowGroupingNameSelector(state, apiRef.current.instanceId);\n      var filteringMethod = filteringMethodCollectionRef.current[rowGroupingName];\n\n      if (!filteringMethod) {\n        throw new Error('MUI: Invalid filtering method.');\n      }\n\n      var filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      var isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      lastFilteringMethodApplied.current = filteringMethod;\n      var filteringResult = filteringMethod({\n        isRowMatchingFilters: isRowMatchingFilters\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent(GridEvents.visibleRowsSet);\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.filterMode]);\n  var upsertFilterItem = React.useCallback(function (item) {\n    var filterModel = gridFilterModelSelector(apiRef);\n\n    var items = _toConsumableArray(filterModel.items);\n\n    var itemIndex = items.findIndex(function (filterItem) {\n      return filterItem.id === item.id;\n    });\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items: items\n    }));\n  }, [apiRef]);\n  var deleteFilterItem = React.useCallback(function (itemToDelete) {\n    var filterModel = gridFilterModelSelector(apiRef);\n    var items = filterModel.items.filter(function (item) {\n      return item.id !== itemToDelete.id;\n    });\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items: items\n    }));\n  }, [apiRef]);\n  var showFilterPanel = React.useCallback(function (targetColumnField) {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      var filterModel = gridFilterModelSelector(apiRef);\n      var filterItemsWithValue = filterModel.items.filter(function (item) {\n        return item.value !== undefined;\n      });\n      var newFilterItems;\n      var filterItemOnTarget = filterItemsWithValue.find(function (item) {\n        return item.columnField === targetColumnField;\n      });\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [{\n          columnField: targetColumnField\n        }];\n      } else {\n        newFilterItems = [].concat(_toConsumableArray(filterItemsWithValue), [{\n          columnField: targetColumnField\n        }]);\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  var hideFilterPanel = React.useCallback(function () {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  var setFilterLinkOperator = React.useCallback(function (linkOperator) {\n    var filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator: linkOperator\n    }));\n  }, [apiRef]);\n  var setFilterModel = React.useCallback(function (model) {\n    var currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.setState(mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef));\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  var getVisibleRowModels = React.useCallback(function () {\n    var visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(function (row) {\n      return [row.id, row.model];\n    }));\n  }, [apiRef]);\n  var filterApi = {\n    setFilterLinkOperator: setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem: deleteFilterItem,\n    upsertFilterItem: upsertFilterItem,\n    setFilterModel: setFilterModel,\n    showFilterPanel: showFilterPanel,\n    hideFilterPanel: hideFilterPanel,\n    getVisibleRowModels: getVisibleRowModels\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  var stateExportPreProcessing = React.useCallback(function (prevState) {\n    var filterModelToExport = gridFilterModelSelector(apiRef);\n\n    if (filterModelToExport.items.length === 0 && filterModelToExport.linkOperator === getDefaultGridFilterModel().linkOperator) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef]);\n  var stateRestorePreProcessing = React.useCallback(function (params, context) {\n    var _context$stateToResto;\n\n    var filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.setState(mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef));\n    return _extends({}, params, {\n      callbacks: [].concat(_toConsumableArray(params.callbacks), [apiRef.current.unstable_applyFilters])\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  var flatFilteringMethod = React.useCallback(function (params) {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      var rowIds = gridRowIdsSelector(apiRef);\n      var filteredRowsLookup = {};\n\n      for (var i = 0; i < rowIds.length; i += 1) {\n        var rowId = rowIds[i];\n        filteredRowsLookup[rowId] = params.isRowMatchingFilters(rowId);\n      }\n\n      return {\n        filteredRowsLookup: filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterFilteringMethod(apiRef, 'none', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  var handleColumnsChange = React.useCallback(function () {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    var filterModel = gridFilterModelSelector(apiRef);\n    var filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    var newFilterItems = filterModel.items.filter(function (item) {\n      return item.columnField && filterableColumnsLookup[item.columnField];\n    });\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  var handlePreProcessorRegister = React.useCallback(function (name) {\n    if (name !== 'filteringMethod') {\n      return;\n    }\n\n    filteringMethodCollectionRef.current = apiRef.current.unstable_applyPreProcessors('filteringMethod', {});\n    var rowGroupingName = gridRowGroupingNameSelector(apiRef);\n\n    if (lastFilteringMethodApplied.current !== filteringMethodCollectionRef.current[rowGroupingName]) {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.rowsSet, apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, GridEvents.rowExpansionChange, apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, GridEvents.columnsChange, handleColumnsChange);\n  useGridApiEventHandler(apiRef, GridEvents.preProcessorRegister, handlePreProcessorRegister);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(function () {\n    // This line of pre-processor initialization should always come after the registration of `flatFilteringMethod`\n    // Otherwise on the 1st render there would be no filtering method registered\n    filteringMethodCollectionRef.current = apiRef.current.unstable_applyPreProcessors('filteringMethod', {});\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(function () {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"names":["_extends","React","GridEvents","GridFeatureModeConstant","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridFilterableColumnLookupSelector","GridPreferencePanelsValue","getDefaultGridFilterModel","gridFilterModelSelector","gridVisibleSortedRowEntriesSelector","useFirstRender","gridRowIdsSelector","gridRowGroupingNameSelector","useGridRegisterPreProcessor","useGridRegisterFilteringMethod","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","filterStateInitializer","state","props","apiRef","_ref","_props$filterModel","_props$initialState","_props$initialState$f","filterModel","initialState","filter","disableMultipleColumnsFiltering","visibleRowsLookup","filteredDescendantCountLookup","useGridFilter","logger","filteringMethodCollectionRef","useRef","lastFilteringMethodApplied","current","unstable_updateControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","filterModelChange","applyFilters","useCallback","setState","rowGroupingName","instanceId","filteringMethod","Error","isRowMatchingFilters","filterMode","client","filteringResult","publishEvent","visibleRowsSet","forceUpdate","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","debug","filterItemsWithValue","value","undefined","newFilterItems","filterItemOnTarget","find","columnField","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLinkOperator","linkOperator","model","currentModel","unstable_applyFilters","getVisibleRowModels","visibleSortedRows","Map","map","row","filterApi","stateExportPreProcessing","prevState","filterModelToExport","stateRestorePreProcessing","params","context","_context$stateToResto","stateToRestore","callbacks","flatFilteringMethod","rowIds","filteredRowsLookup","i","rowId","handleColumnsChange","filterableColumnsLookup","handlePreProcessorRegister","name","unstable_applyPreProcessors","rowsSet","rowExpansionChange","columnsChange","preProcessorRegister","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector, gridRowGroupingNameSelector } from '../rows';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\nimport { useGridRegisterFilteringMethod } from './useGridRegisterFilteringMethod';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel } from './gridFilterUtils';\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  const filteringMethodCollectionRef = React.useRef({});\n  const lastFilteringMethodApplied = React.useRef(null);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: GridEvents.filterModelChange\n  });\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const rowGroupingName = gridRowGroupingNameSelector(state, apiRef.current.instanceId);\n      const filteringMethod = filteringMethodCollectionRef.current[rowGroupingName];\n\n      if (!filteringMethod) {\n        throw new Error('MUI: Invalid filtering method.');\n      }\n\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      lastFilteringMethodApplied.current = filteringMethod;\n      const filteringResult = filteringMethod({\n        isRowMatchingFilters\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent(GridEvents.visibleRowsSet);\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.filterMode]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }));\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }));\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => item.value !== undefined);\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [{\n          columnField: targetColumnField\n        }];\n      } else {\n        newFilterItems = [...filterItemsWithValue, {\n          columnField: targetColumnField\n        }];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLinkOperator = React.useCallback(linkOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback(model => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.setState(mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef));\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getVisibleRowModels = React.useCallback(() => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(row => [row.id, row.model]));\n  }, [apiRef]);\n  const filterApi = {\n    setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    getVisibleRowModels\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n\n    if (filterModelToExport.items.length === 0 && filterModelToExport.linkOperator === getDefaultGridFilterModel().linkOperator) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.setState(mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      const rowIds = gridRowIdsSelector(apiRef);\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        filteredRowsLookup[rowId] = params.isRowMatchingFilters(rowId);\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterFilteringMethod(apiRef, 'none', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handlePreProcessorRegister = React.useCallback(name => {\n    if (name !== 'filteringMethod') {\n      return;\n    }\n\n    filteringMethodCollectionRef.current = apiRef.current.unstable_applyPreProcessors('filteringMethod', {});\n    const rowGroupingName = gridRowGroupingNameSelector(apiRef);\n\n    if (lastFilteringMethodApplied.current !== filteringMethodCollectionRef.current[rowGroupingName]) {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.rowsSet, apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, GridEvents.rowExpansionChange, apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, GridEvents.columnsChange, handleColumnsChange);\n  useGridApiEventHandler(apiRef, GridEvents.preProcessorRegister, handlePreProcessorRegister);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    // This line of pre-processor initialization should always come after the registration of `flatFilteringMethod`\n    // Otherwise on the 1st render there would be no filtering method registered\n    filteringMethodCollectionRef.current = apiRef.current.unstable_applyPreProcessors('filteringMethod', {});\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"]},"metadata":{},"sourceType":"module"}