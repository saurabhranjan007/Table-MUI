{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../models/events';\nimport { useGridApiEventHandler } from '../utils/useGridApiEventHandler';\nexport function useGridErrorHandler(apiRef, props) {\n  var handleError = React.useCallback(function (args) {\n    // We are handling error here, to set up the handler as early as possible and be able to catch error thrown at init time.\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        error: args\n      });\n    });\n  }, [apiRef]);\n  React.useEffect(function () {\n    handleError(props.error);\n  }, [handleError, props.error]);\n  useGridApiEventHandler(apiRef, GridEvents.componentError, handleError);\n}","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/hooks/core/useGridErrorHandler.js"],"names":["_extends","React","GridEvents","useGridApiEventHandler","useGridErrorHandler","apiRef","props","handleError","useCallback","args","current","setState","state","error","useEffect","componentError"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,sBAAT,QAAuC,iCAAvC;AACA,OAAO,SAASC,mBAAT,CAA6BC,MAA7B,EAAqCC,KAArC,EAA4C;AACjD,MAAMC,WAAW,GAAGN,KAAK,CAACO,WAAN,CAAkB,UAAAC,IAAI,EAAI;AAC5C;AACAJ,IAAAA,MAAM,CAACK,OAAP,CAAeC,QAAf,CAAwB,UAAAC,KAAK;AAAA,aAAIZ,QAAQ,CAAC,EAAD,EAAKY,KAAL,EAAY;AACnDC,QAAAA,KAAK,EAAEJ;AAD4C,OAAZ,CAAZ;AAAA,KAA7B;AAGD,GALmB,EAKjB,CAACJ,MAAD,CALiB,CAApB;AAMAJ,EAAAA,KAAK,CAACa,SAAN,CAAgB,YAAM;AACpBP,IAAAA,WAAW,CAACD,KAAK,CAACO,KAAP,CAAX;AACD,GAFD,EAEG,CAACN,WAAD,EAAcD,KAAK,CAACO,KAApB,CAFH;AAGAV,EAAAA,sBAAsB,CAACE,MAAD,EAASH,UAAU,CAACa,cAApB,EAAoCR,WAApC,CAAtB;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../models/events';\nimport { useGridApiEventHandler } from '../utils/useGridApiEventHandler';\nexport function useGridErrorHandler(apiRef, props) {\n  const handleError = React.useCallback(args => {\n    // We are handling error here, to set up the handler as early as possible and be able to catch error thrown at init time.\n    apiRef.current.setState(state => _extends({}, state, {\n      error: args\n    }));\n  }, [apiRef]);\n  React.useEffect(() => {\n    handleError(props.error);\n  }, [handleError, props.error]);\n  useGridApiEventHandler(apiRef, GridEvents.componentError, handleError);\n}"]},"metadata":{},"sourceType":"module"}