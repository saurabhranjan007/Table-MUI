{"ast":null,"code":"import _slicedToArray from \"C:/pproject-files/new-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { isOverflown } from '../../utils/domUtils';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    root: ['columnHeaderTitle']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nvar GridColumnHeaderTitleRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderTitle',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.columnHeaderTitle;\n  }\n})(function (_ref) {\n  var theme = _ref.theme;\n  return {\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    fontWeight: theme.typography.fontWeightMedium\n  };\n});\nvar ColumnHeaderInnerTitle = /*#__PURE__*/React.forwardRef(function ColumnHeaderInnerTitle(props, ref) {\n  var className = props.className,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var rootProps = useGridRootProps();\n  var ownerState = {\n    classes: rootProps.classes\n  };\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(GridColumnHeaderTitleRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other));\n}); // No React.memo here as if we display the sort icon, we need to recalculate the isOver\n\nfunction GridColumnHeaderTitle(props) {\n  var _rootProps$components;\n\n  var label = props.label,\n      description = props.description,\n      columnWidth = props.columnWidth;\n  var rootProps = useGridRootProps();\n  var titleRef = React.useRef(null);\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tooltip = _React$useState2[0],\n      setTooltip = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (!description && titleRef && titleRef.current) {\n      var isOver = isOverflown(titleRef.current);\n\n      if (isOver) {\n        setTooltip(label);\n      } else {\n        setTooltip('');\n      }\n    }\n  }, [titleRef, columnWidth, description, label]);\n  return /*#__PURE__*/_jsx(rootProps.components.BaseTooltip, _extends({\n    title: description || tooltip\n  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTooltip, {\n    children: /*#__PURE__*/_jsx(ColumnHeaderInnerTitle, {\n      ref: titleRef,\n      children: label\n    })\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridColumnHeaderTitle.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  columnWidth: PropTypes.number.isRequired,\n  description: PropTypes.string,\n  label: PropTypes.string.isRequired\n} : void 0;\nexport { GridColumnHeaderTitle };","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderTitle.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_composeClasses","composeClasses","styled","isOverflown","getDataGridUtilityClass","useGridRootProps","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","GridColumnHeaderTitleRoot","name","slot","overridesResolver","props","styles","columnHeaderTitle","theme","textOverflow","overflow","whiteSpace","fontWeight","typography","fontWeightMedium","ColumnHeaderInnerTitle","forwardRef","ref","className","other","rootProps","GridColumnHeaderTitle","_rootProps$components","label","description","columnWidth","titleRef","useRef","useState","tooltip","setTooltip","useEffect","current","isOver","components","BaseTooltip","title","componentsProps","baseTooltip","children","process","env","NODE_ENV","propTypes","number","isRequired","string"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { isOverflown } from '../../utils/domUtils';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['columnHeaderTitle']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridColumnHeaderTitleRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderTitle',\n  overridesResolver: (props, styles) => styles.columnHeaderTitle\n})(({\n  theme\n}) => ({\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap',\n  fontWeight: theme.typography.fontWeightMedium\n}));\nconst ColumnHeaderInnerTitle = /*#__PURE__*/React.forwardRef(function ColumnHeaderInnerTitle(props, ref) {\n  const {\n    className\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(GridColumnHeaderTitleRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other));\n});\n\n// No React.memo here as if we display the sort icon, we need to recalculate the isOver\nfunction GridColumnHeaderTitle(props) {\n  var _rootProps$components;\n\n  const {\n    label,\n    description,\n    columnWidth\n  } = props;\n  const rootProps = useGridRootProps();\n  const titleRef = React.useRef(null);\n  const [tooltip, setTooltip] = React.useState('');\n  React.useEffect(() => {\n    if (!description && titleRef && titleRef.current) {\n      const isOver = isOverflown(titleRef.current);\n\n      if (isOver) {\n        setTooltip(label);\n      } else {\n        setTooltip('');\n      }\n    }\n  }, [titleRef, columnWidth, description, label]);\n  return /*#__PURE__*/_jsx(rootProps.components.BaseTooltip, _extends({\n    title: description || tooltip\n  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTooltip, {\n    children: /*#__PURE__*/_jsx(ColumnHeaderInnerTitle, {\n      ref: titleRef,\n      children: label\n    })\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridColumnHeaderTitle.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  columnWidth: PropTypes.number.isRequired,\n  description: PropTypes.string,\n  label: PropTypes.string.isRequired\n} : void 0;\nexport { GridColumnHeaderTitle };"]},"metadata":{},"sourceType":"module"}