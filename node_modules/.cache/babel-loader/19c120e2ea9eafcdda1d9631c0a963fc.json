{"ast":null,"code":"var _jsxFileName = \"C:\\\\pproject-files\\\\new-app\\\\src\\\\new-components\\\\TableMUI.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Details from \"./Details\";\nimport { DataGrid } from '@mui/x-data-grid';\nimport Button from '@mui/material/Button';\nimport { GridColDef, GridApi, GridCellValue } from '@mui/x-data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"id\",\n  headerName: \"ID\"\n}, {\n  field: \"name\",\n  headerName: \"Name\",\n  width: 200\n}, {\n  field: \"username\",\n  headerName: \"User Name\",\n  width: 200\n}, {\n  field: \"email\",\n  headerName: \"Email\",\n  width: 300\n}, {\n  field: \"phone\",\n  headerName: \"Phone\",\n  width: 250\n}, {\n  field: \"website\",\n  headerName: \"Website\",\n  width: 200\n}, // {field: \"action\", headerName: \"Action\",  width: 150},\n{\n  field: \"action\",\n  headerName: \"Action\",\n  sortable: false,\n  renderCell: params => {\n    const onClick = e => {\n      e.stopPropagation();\n    }; //   return <Button variant=\"outlined\" color=\"secondary\"\n    //     onClick={() => \n    //         {\n    //             alert(\"clicked..\");\n    //         }}>Details</Button>;\n\n  }\n}]; // {\n//     field: 'action',\n//     headerName: 'Action',\n//     sortable: false,\n//     renderCell: (params) => {\n//       const onClick = (e) => {\n//         e.stopPropagation(); // don't select this row after clicking\n//         const api: GridApi = params.api;\n//         const thisRow: Record<string, GridCellValue> = {};\n//         api\n//           .getAllColumns()\n//           .filter((c) => c.field !== '__check__' && !!c)\n//           .forEach(\n//             (c) => (thisRow[c.field] = params.getValue(params.id, c.field)),\n//           );\n//         return alert(JSON.stringify(thisRow, null, 4));\n//       };\n//       return <Button onClick={onClick}>Click</Button>;\n//     },\n//   },\n//   { field: 'id', headerName: 'ID', width: 70 },\n//   { field: 'firstName', headerName: 'First name', width: 130 },\n//   { field: 'lastName', headerName: 'Last name', width: 130 },\n//   {\n//     field: 'age',\n//     headerName: 'Age',\n//     type: 'number',\n//     width: 90,\n//   },\n//   {\n//     field: 'fullName',\n//     headerName: 'Full name',\n//     description: 'This column has a value getter and is not sortable.',\n//     sortable: false,\n//     width: 160,\n//     valueGetter: (params) =>\n//       `${params.getValue(params.id, 'firstName') || ''} ${\n//         params.getValue(params.id, 'lastName') || ''\n//       }`,\n//   },\n\nfunction TableMUI() {\n  _s();\n\n  const [tableData, setTableData] = useState([]);\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(data => setTableData(data)).catch(error => console.log(\"Error =>\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 650,\n      width: '90%',\n      textAlign: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: tableData,\n      columns: columns // pageSize={10}\n      ,\n      initialState: {\n        sorting: {\n          sortModel: [{\n            field: '',\n            sort: 'asc'\n          }]\n        },\n        filter: {\n          filterModel: {\n            items: [{\n              columnField: '',\n              operatorValue: '>',\n              value: ''\n            }]\n          }\n        }\n      } // checkboxSelection\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TableMUI, \"qcVQMfdRY2vxgSp5dutEfuJRk7k=\");\n\n_c = TableMUI;\nexport default TableMUI;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableMUI\");","map":{"version":3,"sources":["C:/pproject-files/new-app/src/new-components/TableMUI.jsx"],"names":["React","useState","useEffect","Details","DataGrid","Button","GridColDef","GridApi","GridCellValue","columns","field","headerName","width","sortable","renderCell","params","onClick","e","stopPropagation","TableMUI","tableData","setTableData","fetch","then","response","json","data","catch","error","console","log","height","textAlign","sorting","sortModel","sort","filter","filterModel","items","columnField","operatorValue","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Details from \"./Details\";\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport Button from '@mui/material/Button';\r\nimport { GridColDef, GridApi, GridCellValue } from '@mui/x-data-grid';\r\n\r\n\r\nconst columns = [\r\n    {field: \"id\", headerName: \"ID\"},\r\n    {field: \"name\", headerName: \"Name\", width: 200},\r\n    {field: \"username\", headerName: \"User Name\", width: 200},\r\n    {field: \"email\", headerName: \"Email\", width: 300},\r\n    {field: \"phone\", headerName: \"Phone\", width: 250},\r\n    {field: \"website\", headerName: \"Website\", width: 200},\r\n    // {field: \"action\", headerName: \"Action\",  width: 150},\r\n    {\r\n        field: \"action\",\r\n        headerName: \"Action\",\r\n        sortable: false,\r\n        renderCell: (params) => {\r\n\r\n            const onClick = (e) => {\r\n                e.stopPropagation();\r\n            }\r\n        //   return <Button variant=\"outlined\" color=\"secondary\"\r\n        //     onClick={() => \r\n        //         {\r\n        //             alert(\"clicked..\");\r\n\r\n        //         }}>Details</Button>;\r\n        }\r\n      },\r\n]\r\n\r\n\r\n\r\n\r\n// {\r\n//     field: 'action',\r\n//     headerName: 'Action',\r\n//     sortable: false,\r\n//     renderCell: (params) => {\r\n//       const onClick = (e) => {\r\n//         e.stopPropagation(); // don't select this row after clicking\r\n\r\n//         const api: GridApi = params.api;\r\n//         const thisRow: Record<string, GridCellValue> = {};\r\n\r\n//         api\r\n//           .getAllColumns()\r\n//           .filter((c) => c.field !== '__check__' && !!c)\r\n//           .forEach(\r\n//             (c) => (thisRow[c.field] = params.getValue(params.id, c.field)),\r\n//           );\r\n\r\n//         return alert(JSON.stringify(thisRow, null, 4));\r\n//       };\r\n\r\n//       return <Button onClick={onClick}>Click</Button>;\r\n//     },\r\n//   },\r\n//   { field: 'id', headerName: 'ID', width: 70 },\r\n//   { field: 'firstName', headerName: 'First name', width: 130 },\r\n//   { field: 'lastName', headerName: 'Last name', width: 130 },\r\n//   {\r\n//     field: 'age',\r\n//     headerName: 'Age',\r\n//     type: 'number',\r\n//     width: 90,\r\n//   },\r\n//   {\r\n//     field: 'fullName',\r\n//     headerName: 'Full name',\r\n//     description: 'This column has a value getter and is not sortable.',\r\n//     sortable: false,\r\n//     width: 160,\r\n//     valueGetter: (params) =>\r\n//       `${params.getValue(params.id, 'firstName') || ''} ${\r\n//         params.getValue(params.id, 'lastName') || ''\r\n//       }`,\r\n//   },\r\n\r\nfunction TableMUI() {\r\n\r\n    const [tableData, setTableData] = useState([])\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => response.json())\r\n        .then(data => setTableData(data))\r\n        .catch(error => console.log(\"Error =>\", error)); \r\n    }, [])\r\n\r\n    return(\r\n\r\n        <div style={{height: 650, width: '90%', textAlign: \"center\"}}>\r\n\r\n            <DataGrid \r\n                rows={tableData}\r\n                columns={columns}\r\n                // pageSize={10}\r\n                initialState={{\r\n                    sorting: {\r\n                        sortModel: [{ field: '', sort: 'asc' }],\r\n                    },\r\n                    filter: {\r\n                        filterModel: {\r\n                            items: [{ columnField: '', operatorValue: '>', value: '' }],\r\n                        },\r\n                    },\r\n                }}\r\n                // checkboxSelection\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TableMUI;"]},"metadata":{},"sourceType":"module"}