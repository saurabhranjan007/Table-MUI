{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { useCellEditing } from './useGridCellEditing';\nimport { useGridRowEditing } from './useGridRowEditing';\nexport const editingStateInitializer = state => _extends({}, state, {\n  editRows: {}\n});\n/**\n * @requires useGridFocus - can be after, async only\n * @requires useGridParamsApi (method)\n * @requires useGridColumns (state)\n */\n\nexport function useGridEditing(apiRef, props) {\n  var _props$experimentalFe2;\n\n  const logger = useGridLogger(apiRef, 'useGridEditRows');\n  useCellEditing(apiRef, props);\n  useGridRowEditing(apiRef, props);\n  const debounceMap = React.useRef({});\n  apiRef.current.unstable_updateControlState({\n    stateId: 'editRows',\n    propModel: props.editRowsModel,\n    propOnChange: props.onEditRowsModelChange,\n    stateSelector: gridEditRowsStateSelector,\n    changeEvent: GridEvents.editRowsModelChange\n  });\n  const isCellEditable = React.useCallback(params => !params.rowNode.isAutoGenerated && !!params.colDef.editable && !!params.colDef.renderEditCell && (!props.isCellEditable || props.isCellEditable(params)), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [props.isCellEditable]);\n\n  const maybeDebounce = (id, field, debounceMs, callback) => {\n    if (!debounceMs) {\n      callback();\n      return;\n    }\n\n    if (!debounceMap.current[id]) {\n      debounceMap.current[id] = {};\n    }\n\n    if (debounceMap.current[id][field]) {\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n    }\n\n    const callbackToRunImmediately = () => {\n      callback();\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n      delete debounceMap.current[id][field];\n    };\n\n    const timeout = setTimeout(() => {\n      callback();\n      delete debounceMap.current[id][field];\n    }, debounceMs);\n    debounceMap.current[id][field] = [timeout, callbackToRunImmediately];\n  };\n\n  const runPendingEditCellValueChangeDebounce = React.useCallback((id, field) => {\n    if (!debounceMap.current[id]) {\n      return;\n    }\n\n    if (!field) {\n      Object.keys(debounceMap.current[id]).forEach(debouncedField => {\n        const [, callback] = debounceMap.current[id][debouncedField];\n        callback();\n      });\n    } else if (debounceMap.current[id][field]) {\n      const [, callback] = debounceMap.current[id][field];\n      callback();\n    }\n  }, []);\n  const setEditCellValue = React.useCallback(function (params) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    maybeDebounce(params.id, params.field, params.debounceMs, () => {\n      var _props$experimentalFe;\n\n      if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n        if (props.editMode === 'row') {\n          return apiRef.current.unstable_setRowEditingEditCellValue(params);\n        }\n\n        return apiRef.current.unstable_setCellEditingEditCellValue(params);\n      }\n\n      const newParams = {\n        id: params.id,\n        field: params.field,\n        props: {\n          value: params.value\n        }\n      };\n      return apiRef.current.publishEvent(GridEvents.editCellPropsChange, newParams, event);\n    });\n  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const parseValue = React.useCallback((id, field, value) => {\n    const column = apiRef.current.getColumn(field);\n    return column.valueParser ? column.valueParser(value, apiRef.current.getCellParams(id, field)) : value;\n  }, [apiRef]);\n  const setEditCellProps = React.useCallback(params => {\n    const {\n      id,\n      field,\n      props: editProps\n    } = params;\n    logger.debug(`Setting cell props on id: ${id} field: ${field}`);\n    apiRef.current.setState(state => {\n      const editRowsModel = _extends({}, state.editRows);\n\n      editRowsModel[id] = _extends({}, state.editRows[id]);\n      editRowsModel[id][field] = _extends({}, editProps, {\n        value: parseValue(id, field, editProps.value)\n      });\n      return _extends({}, state, {\n        editRows: editRowsModel\n      });\n    });\n    apiRef.current.forceUpdate();\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    return editRowsState[id][field];\n  }, [apiRef, logger, parseValue]);\n  const setEditRowsModel = React.useCallback(model => {\n    const currentModel = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting editRows model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        editRows: model\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const getEditRowsModel = React.useCallback(() => gridEditRowsStateSelector(apiRef.current.state), [apiRef]);\n  const preventTextSelection = React.useCallback((params, event) => {\n    const isMoreThanOneClick = event.detail > 1;\n\n    if (params.isEditable && params.cellMode === GridCellModes.View && isMoreThanOneClick) {\n      // If we click more than one time, then we prevent the default behavior of selecting the text cell.\n      event.preventDefault();\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, GridEvents.cellMouseDown, preventTextSelection);\n  useGridApiOptionHandler(apiRef, GridEvents.editCellPropsChange, props.onEditCellPropsChange); // TODO v6: remove, use `preProcessEditCellProps` instead\n\n  const editingSharedApi = {\n    isCellEditable,\n    setEditRowsModel,\n    getEditRowsModel,\n    setEditCellValue,\n    unstable_setEditCellProps: setEditCellProps,\n    unstable_parseValue: parseValue,\n    unstable_runPendingEditCellValueChangeDebounce: runPendingEditCellValueChangeDebounce\n  };\n  useGridApiMethod(apiRef, editingSharedApi, 'EditRowApi');\n  React.useEffect(() => {\n    if (props.editRowsModel !== undefined) {\n      apiRef.current.setEditRowsModel(props.editRowsModel);\n    }\n  }, [apiRef, props.editRowsModel]);\n}","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridEditing.js"],"names":["_extends","React","GridEvents","GridCellModes","useGridApiEventHandler","useGridApiOptionHandler","useGridApiMethod","useGridLogger","gridEditRowsStateSelector","useCellEditing","useGridRowEditing","editingStateInitializer","state","editRows","useGridEditing","apiRef","props","_props$experimentalFe2","logger","debounceMap","useRef","current","unstable_updateControlState","stateId","propModel","editRowsModel","propOnChange","onEditRowsModelChange","stateSelector","changeEvent","editRowsModelChange","isCellEditable","useCallback","params","rowNode","isAutoGenerated","colDef","editable","renderEditCell","maybeDebounce","id","field","debounceMs","callback","timeout","clearTimeout","callbackToRunImmediately","setTimeout","runPendingEditCellValueChangeDebounce","Object","keys","forEach","debouncedField","setEditCellValue","event","_props$experimentalFe","experimentalFeatures","preventCommitWhileValidating","editMode","unstable_setRowEditingEditCellValue","unstable_setCellEditingEditCellValue","newParams","value","publishEvent","editCellPropsChange","parseValue","column","getColumn","valueParser","getCellParams","setEditCellProps","editProps","debug","setState","forceUpdate","editRowsState","setEditRowsModel","model","currentModel","getEditRowsModel","preventTextSelection","isMoreThanOneClick","detail","isEditable","cellMode","View","preventDefault","cellMouseDown","onEditCellPropsChange","editingSharedApi","unstable_setEditCellProps","unstable_parseValue","unstable_runPendingEditCellValueChangeDebounce","useEffect","undefined"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { useCellEditing } from './useGridCellEditing';\nimport { useGridRowEditing } from './useGridRowEditing';\nexport const editingStateInitializer = state => _extends({}, state, {\n  editRows: {}\n});\n/**\n * @requires useGridFocus - can be after, async only\n * @requires useGridParamsApi (method)\n * @requires useGridColumns (state)\n */\n\nexport function useGridEditing(apiRef, props) {\n  var _props$experimentalFe2;\n\n  const logger = useGridLogger(apiRef, 'useGridEditRows');\n  useCellEditing(apiRef, props);\n  useGridRowEditing(apiRef, props);\n  const debounceMap = React.useRef({});\n  apiRef.current.unstable_updateControlState({\n    stateId: 'editRows',\n    propModel: props.editRowsModel,\n    propOnChange: props.onEditRowsModelChange,\n    stateSelector: gridEditRowsStateSelector,\n    changeEvent: GridEvents.editRowsModelChange\n  });\n  const isCellEditable = React.useCallback(params => !params.rowNode.isAutoGenerated && !!params.colDef.editable && !!params.colDef.renderEditCell && (!props.isCellEditable || props.isCellEditable(params)), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [props.isCellEditable]);\n\n  const maybeDebounce = (id, field, debounceMs, callback) => {\n    if (!debounceMs) {\n      callback();\n      return;\n    }\n\n    if (!debounceMap.current[id]) {\n      debounceMap.current[id] = {};\n    }\n\n    if (debounceMap.current[id][field]) {\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n    }\n\n    const callbackToRunImmediately = () => {\n      callback();\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n      delete debounceMap.current[id][field];\n    };\n\n    const timeout = setTimeout(() => {\n      callback();\n      delete debounceMap.current[id][field];\n    }, debounceMs);\n    debounceMap.current[id][field] = [timeout, callbackToRunImmediately];\n  };\n\n  const runPendingEditCellValueChangeDebounce = React.useCallback((id, field) => {\n    if (!debounceMap.current[id]) {\n      return;\n    }\n\n    if (!field) {\n      Object.keys(debounceMap.current[id]).forEach(debouncedField => {\n        const [, callback] = debounceMap.current[id][debouncedField];\n        callback();\n      });\n    } else if (debounceMap.current[id][field]) {\n      const [, callback] = debounceMap.current[id][field];\n      callback();\n    }\n  }, []);\n  const setEditCellValue = React.useCallback((params, event = {}) => {\n    maybeDebounce(params.id, params.field, params.debounceMs, () => {\n      var _props$experimentalFe;\n\n      if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n        if (props.editMode === 'row') {\n          return apiRef.current.unstable_setRowEditingEditCellValue(params);\n        }\n\n        return apiRef.current.unstable_setCellEditingEditCellValue(params);\n      }\n\n      const newParams = {\n        id: params.id,\n        field: params.field,\n        props: {\n          value: params.value\n        }\n      };\n      return apiRef.current.publishEvent(GridEvents.editCellPropsChange, newParams, event);\n    });\n  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const parseValue = React.useCallback((id, field, value) => {\n    const column = apiRef.current.getColumn(field);\n    return column.valueParser ? column.valueParser(value, apiRef.current.getCellParams(id, field)) : value;\n  }, [apiRef]);\n  const setEditCellProps = React.useCallback(params => {\n    const {\n      id,\n      field,\n      props: editProps\n    } = params;\n    logger.debug(`Setting cell props on id: ${id} field: ${field}`);\n    apiRef.current.setState(state => {\n      const editRowsModel = _extends({}, state.editRows);\n\n      editRowsModel[id] = _extends({}, state.editRows[id]);\n      editRowsModel[id][field] = _extends({}, editProps, {\n        value: parseValue(id, field, editProps.value)\n      });\n      return _extends({}, state, {\n        editRows: editRowsModel\n      });\n    });\n    apiRef.current.forceUpdate();\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    return editRowsState[id][field];\n  }, [apiRef, logger, parseValue]);\n  const setEditRowsModel = React.useCallback(model => {\n    const currentModel = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting editRows model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        editRows: model\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const getEditRowsModel = React.useCallback(() => gridEditRowsStateSelector(apiRef.current.state), [apiRef]);\n  const preventTextSelection = React.useCallback((params, event) => {\n    const isMoreThanOneClick = event.detail > 1;\n\n    if (params.isEditable && params.cellMode === GridCellModes.View && isMoreThanOneClick) {\n      // If we click more than one time, then we prevent the default behavior of selecting the text cell.\n      event.preventDefault();\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, GridEvents.cellMouseDown, preventTextSelection);\n  useGridApiOptionHandler(apiRef, GridEvents.editCellPropsChange, props.onEditCellPropsChange); // TODO v6: remove, use `preProcessEditCellProps` instead\n\n  const editingSharedApi = {\n    isCellEditable,\n    setEditRowsModel,\n    getEditRowsModel,\n    setEditCellValue,\n    unstable_setEditCellProps: setEditCellProps,\n    unstable_parseValue: parseValue,\n    unstable_runPendingEditCellValueChangeDebounce: runPendingEditCellValueChangeDebounce\n  };\n  useGridApiMethod(apiRef, editingSharedApi, 'EditRowApi');\n  React.useEffect(() => {\n    if (props.editRowsModel !== undefined) {\n      apiRef.current.setEditRowsModel(props.editRowsModel);\n    }\n  }, [apiRef, props.editRowsModel]);\n}"]},"metadata":{},"sourceType":"module"}