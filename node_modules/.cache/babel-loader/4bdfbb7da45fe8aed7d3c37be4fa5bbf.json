{"ast":null,"code":"import _asyncToGenerator from \"C:/pproject-files/new-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/pproject-files/new-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"C:\\\\pproject-files\\\\new-app\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridVisibleRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityHeaderHeightSelector } from '../density/densitySelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\n\nexport var useGridPrintExport = function useGridPrintExport(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useGridPrintExport');\n  var doc = React.useRef(null);\n  var previousGridState = React.useRef(null);\n  var previousColumnVisibility = React.useRef({});\n  React.useEffect(function () {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]); // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n\n  var updateGridColumnsForPrint = React.useCallback(function (fields, allColumns) {\n    return new Promise(function (resolve) {\n      if (!fields && !allColumns) {\n        resolve();\n        return;\n      }\n\n      var exportedColumnFields = getColumnsToExport({\n        apiRef: apiRef,\n        options: {\n          fields: fields,\n          allColumns: allColumns\n        }\n      }).map(function (column) {\n        return column.field;\n      });\n      var columns = gridColumnDefinitionsSelector(apiRef);\n      var newColumnVisibilityModel = {};\n      columns.forEach(function (column) {\n        newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n      });\n      apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n      resolve();\n    });\n  }, [apiRef]);\n  var buildPrintWindow = React.useCallback(function (title) {\n    var iframeEl = document.createElement('iframe');\n    iframeEl.id = 'grid-print-window'; // Without this 'onload' event won't fire in some browsers\n\n    iframeEl.src = window.location.href;\n    iframeEl.style.position = 'absolute';\n    iframeEl.style.width = '0px';\n    iframeEl.style.height = '0px';\n    iframeEl.title = title || document.title;\n    return iframeEl;\n  }, []);\n  var handlePrintWindowLoad = React.useCallback(function (printWindow, options) {\n    var _printWindow$contentW, _querySelector, _querySelector2;\n\n    var normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false\n    }, options); // Some agents, such as IE11 and Enzyme (as of 2 Jun 2020) continuously call the\n    // `onload` callback. This ensures that it is only called once.\n\n\n    printWindow.onload = null;\n    var printDoc = printWindow.contentDocument || ((_printWindow$contentW = printWindow.contentWindow) == null ? void 0 : _printWindow$contentW.document);\n\n    if (!printDoc) {\n      return;\n    }\n\n    var headerHeight = gridDensityHeaderHeightSelector(apiRef);\n    var rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    var gridRootElement = apiRef.current.rootElementRef.current;\n    var gridClone = gridRootElement.cloneNode(true);\n    var gridCloneViewport = gridClone.querySelector(\".\".concat(gridClasses.virtualScroller)); // Expand the viewport window to prevent clipping\n\n    gridCloneViewport.style.height = 'auto';\n    gridCloneViewport.style.width = 'auto';\n    gridCloneViewport.parentElement.style.width = 'auto';\n    gridCloneViewport.parentElement.style.height = 'auto'; // Allow to overflow to not hide the border of the last row\n\n    var gridMain = gridClone.querySelector(\".\".concat(gridClasses.main));\n    gridMain.style.overflow = 'visible';\n    var columnHeaders = gridClone.querySelector(\".\".concat(gridClasses.columnHeaders));\n    var columnHeadersInner = columnHeaders.querySelector(\".\".concat(gridClasses.columnHeadersInner));\n    columnHeadersInner.style.width = '100%';\n    var gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(\".\".concat(gridClasses.toolbarContainer))) == null ? void 0 : _querySelector.clientHeight) || 0;\n    var gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(\".\".concat(gridClasses.footerContainer))) == null ? void 0 : _querySelector2.clientHeight) || 0;\n\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n\n      (_gridClone$querySelec = gridClone.querySelector(\".\".concat(gridClasses.toolbarContainer))) == null ? void 0 : _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n\n      (_gridClone$querySelec2 = gridClone.querySelector(\".\".concat(gridClasses.footerContainer))) == null ? void 0 : _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    } // Expand container height to accommodate all rows\n\n\n    gridClone.style.height = \"\".concat(rowsMeta.currentPageTotalHeight + headerHeight + gridToolbarElementHeight + gridFooterElementHeight, \"px\"); // Remove all loaded elements from the current host\n\n    printDoc.body.innerHTML = '';\n    printDoc.body.appendChild(gridClone);\n    var defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      var styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n\n    if (normalizeOptions.bodyClassName) {\n      var _printDoc$body$classL;\n\n      (_printDoc$body$classL = printDoc.body.classList).add.apply(_printDoc$body$classL, _toConsumableArray(normalizeOptions.bodyClassName.split(' ')));\n    }\n\n    if (normalizeOptions.copyStyles) {\n      var headStyleElements = doc.current.querySelectorAll(\"style, link[rel='stylesheet']\");\n\n      for (var i = 0; i < headStyleElements.length; i += 1) {\n        var node = headStyleElements[i];\n\n        if (node.tagName === 'STYLE') {\n          var newHeadStyleElements = printDoc.createElement(node.tagName);\n          var sheet = node.sheet;\n\n          if (sheet) {\n            var styleCSS = ''; // NOTE: for-of is not supported by IE\n\n            for (var j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += \"\".concat(sheet.cssRules[j].cssText, \"\\r\\n\");\n              }\n            }\n\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n          var _newHeadStyleElements = printDoc.createElement(node.tagName);\n\n          for (var _j = 0; _j < node.attributes.length; _j += 1) {\n            var attr = node.attributes[_j];\n\n            if (attr) {\n              _newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n\n          printDoc.head.appendChild(_newHeadStyleElements);\n        }\n      }\n    } // Trigger print\n\n\n    if (process.env.NODE_ENV !== 'test') {\n      printWindow.contentWindow.print();\n    }\n  }, [apiRef, doc]);\n  var handlePrintWindowAfterPrint = React.useCallback(function (printWindow) {\n    var _previousGridState$cu, _previousGridState$cu2; // Remove the print iframe\n\n\n    doc.current.body.removeChild(printWindow); // Revert grid to previous state\n\n    apiRef.current.restoreState(previousGridState.current || {});\n\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n\n    apiRef.current.unstable_enableVirtualization(); // Clear local state\n\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n  }, [apiRef]);\n  var exportDataAsPrint = React.useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n      var visibleRowCount, printWindow;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              logger.debug(\"Export data as Print\");\n\n              if (apiRef.current.rootElementRef.current) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('MUI: No grid root element available.');\n\n            case 3:\n              previousGridState.current = apiRef.current.exportState(); // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n\n              previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n\n              if (props.pagination) {\n                visibleRowCount = gridVisibleRowCountSelector(apiRef);\n                apiRef.current.setPageSize(visibleRowCount);\n              }\n\n              _context.next = 8;\n              return updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);\n\n            case 8:\n              apiRef.current.unstable_disableVirtualization();\n              printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n              doc.current.body.appendChild(printWindow);\n\n              if (process.env.NODE_ENV === 'test') {\n                // In test env, run the all pipeline without waiting for loading\n                handlePrintWindowLoad(printWindow, options);\n                handlePrintWindowAfterPrint(printWindow);\n              } else {\n                printWindow.onload = function () {\n                  return handlePrintWindowLoad(printWindow, options);\n                };\n\n                printWindow.contentWindow.onafterprint = function () {\n                  return handlePrintWindowAfterPrint(printWindow);\n                };\n              }\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [props, logger, apiRef, buildPrintWindow, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);\n  var printExportApi = {\n    exportDataAsPrint: exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'GridPrintExportApi');\n};","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js"],"names":["_extends","React","ownerDocument","useGridLogger","gridVisibleRowCountSelector","gridColumnDefinitionsSelector","gridColumnVisibilityModelSelector","gridDensityHeaderHeightSelector","gridClasses","useGridApiMethod","gridRowsMetaSelector","getColumnsToExport","useGridPrintExport","apiRef","props","logger","doc","useRef","previousGridState","previousColumnVisibility","useEffect","current","rootElementRef","updateGridColumnsForPrint","useCallback","fields","allColumns","Promise","resolve","exportedColumnFields","options","map","column","field","columns","newColumnVisibilityModel","forEach","includes","setColumnVisibilityModel","buildPrintWindow","title","iframeEl","document","createElement","id","src","window","location","href","style","position","width","height","handlePrintWindowLoad","printWindow","_printWindow$contentW","_querySelector","_querySelector2","normalizeOptions","copyStyles","hideToolbar","hideFooter","onload","printDoc","contentDocument","contentWindow","headerHeight","rowsMeta","state","gridRootElement","gridClone","cloneNode","gridCloneViewport","querySelector","virtualScroller","parentElement","gridMain","main","overflow","columnHeaders","columnHeadersInner","gridToolbarElementHeight","toolbarContainer","clientHeight","gridFooterElementHeight","footerContainer","_gridClone$querySelec","remove","_gridClone$querySelec2","currentPageTotalHeight","body","innerHTML","appendChild","defaultPageStyle","pageStyle","styleElement","createTextNode","head","bodyClassName","classList","add","split","headStyleElements","querySelectorAll","i","length","node","tagName","newHeadStyleElements","sheet","styleCSS","j","cssRules","cssText","getAttribute","attributes","attr","setAttribute","nodeName","nodeValue","process","env","NODE_ENV","print","handlePrintWindowAfterPrint","_previousGridState$cu","_previousGridState$cu2","removeChild","restoreState","columnVisibilityModel","unstable_enableVirtualization","exportDataAsPrint","debug","Error","exportState","pagination","visibleRowCount","setPageSize","unstable_disableVirtualization","fileName","onafterprint","printExportApi"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridVisibleRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityHeaderHeightSelector } from '../density/densitySelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]); // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns) => new Promise(resolve => {\n    if (!fields && !allColumns) {\n      resolve();\n      return;\n    }\n\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]);\n  const buildPrintWindow = React.useCallback(title => {\n    const iframeEl = document.createElement('iframe');\n    iframeEl.id = 'grid-print-window'; // Without this 'onload' event won't fire in some browsers\n\n    iframeEl.src = window.location.href;\n    iframeEl.style.position = 'absolute';\n    iframeEl.style.width = '0px';\n    iframeEl.style.height = '0px';\n    iframeEl.title = title || document.title;\n    return iframeEl;\n  }, []);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    var _printWindow$contentW, _querySelector, _querySelector2;\n\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false\n    }, options); // Some agents, such as IE11 and Enzyme (as of 2 Jun 2020) continuously call the\n    // `onload` callback. This ensures that it is only called once.\n\n\n    printWindow.onload = null;\n    const printDoc = printWindow.contentDocument || ((_printWindow$contentW = printWindow.contentWindow) == null ? void 0 : _printWindow$contentW.document);\n\n    if (!printDoc) {\n      return;\n    }\n\n    const headerHeight = gridDensityHeaderHeightSelector(apiRef);\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n    const gridCloneViewport = gridClone.querySelector(`.${gridClasses.virtualScroller}`); // Expand the viewport window to prevent clipping\n\n    gridCloneViewport.style.height = 'auto';\n    gridCloneViewport.style.width = 'auto';\n    gridCloneViewport.parentElement.style.width = 'auto';\n    gridCloneViewport.parentElement.style.height = 'auto'; // Allow to overflow to not hide the border of the last row\n\n    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);\n    gridMain.style.overflow = 'visible';\n    const columnHeaders = gridClone.querySelector(`.${gridClasses.columnHeaders}`);\n    const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses.columnHeadersInner}`);\n    columnHeadersInner.style.width = '100%';\n    let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _querySelector.clientHeight) || 0;\n    let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;\n\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n\n      (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n\n      (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    } // Expand container height to accommodate all rows\n\n\n    gridClone.style.height = `${rowsMeta.currentPageTotalHeight + headerHeight + gridToolbarElementHeight + gridFooterElementHeight}px`; // Remove all loaded elements from the current host\n\n    printDoc.body.innerHTML = '';\n    printDoc.body.appendChild(gridClone);\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n\n    if (normalizeOptions.copyStyles) {\n      const headStyleElements = doc.current.querySelectorAll(\"style, link[rel='stylesheet']\");\n\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n\n          if (sheet) {\n            let styleCSS = ''; // NOTE: for-of is not supported by IE\n\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += `${sheet.cssRules[j].cssText}\\r\\n`;\n              }\n            }\n\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    } // Trigger print\n\n\n    if (process.env.NODE_ENV !== 'test') {\n      printWindow.contentWindow.print();\n    }\n  }, [apiRef, doc]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    var _previousGridState$cu, _previousGridState$cu2;\n\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow); // Revert grid to previous state\n\n    apiRef.current.restoreState(previousGridState.current || {});\n\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n\n    apiRef.current.unstable_enableVirtualization(); // Clear local state\n\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI: No grid root element available.');\n    }\n\n    previousGridState.current = apiRef.current.exportState(); // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n\n    if (props.pagination) {\n      const visibleRowCount = gridVisibleRowCountSelector(apiRef);\n      apiRef.current.setPageSize(visibleRowCount);\n    }\n\n    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);\n    apiRef.current.unstable_disableVirtualization();\n    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n    doc.current.body.appendChild(printWindow);\n\n    if (process.env.NODE_ENV === 'test') {\n      // In test env, run the all pipeline without waiting for loading\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => handlePrintWindowLoad(printWindow, options);\n\n      printWindow.contentWindow.onafterprint = () => handlePrintWindowAfterPrint(printWindow);\n    }\n  }, [props, logger, apiRef, buildPrintWindow, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'GridPrintExportApi');\n};"]},"metadata":{},"sourceType":"module"}