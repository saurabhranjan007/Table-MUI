{"ast":null,"code":"import _classCallCheck from \"C:/pproject-files/new-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/pproject-files/new-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// If no effect ran after this amount of time, we assume that the render was not committed by React\nvar CLEANUP_TIMER_LOOP_MILLIS = 1000;\nexport var TimerBasedCleanupTracking = /*#__PURE__*/function () {\n  function TimerBasedCleanupTracking() {\n    _classCallCheck(this, TimerBasedCleanupTracking);\n\n    this.timeouts = new Map();\n  }\n\n  _createClass(TimerBasedCleanupTracking, [{\n    key: \"register\",\n    value: function register(object, unsubscribe, unregisterToken) {\n      var _this = this;\n\n      if (!this.timeouts) {\n        this.timeouts = new Map();\n      }\n\n      var timeout = setTimeout(function () {\n        if (typeof unsubscribe === 'function') {\n          unsubscribe();\n        }\n\n        _this.timeouts.delete(unregisterToken.cleanupToken);\n      }, CLEANUP_TIMER_LOOP_MILLIS);\n      this.timeouts.set(unregisterToken.cleanupToken, timeout);\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister(unregisterToken) {\n      var timeout = this.timeouts.get(unregisterToken.cleanupToken);\n\n      if (timeout) {\n        this.timeouts.delete(unregisterToken.cleanupToken);\n        clearTimeout(timeout);\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this2 = this;\n\n      if (this.timeouts) {\n        this.timeouts.forEach(function (value, key) {\n          _this2.unregister({\n            cleanupToken: key\n          });\n        });\n        this.timeouts = undefined;\n      }\n    }\n  }]);\n\n  return TimerBasedCleanupTracking;\n}();","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/utils/cleanupTracking/TimerBasedCleanupTracking.js"],"names":["CLEANUP_TIMER_LOOP_MILLIS","TimerBasedCleanupTracking","timeouts","Map","object","unsubscribe","unregisterToken","timeout","setTimeout","delete","cleanupToken","set","get","clearTimeout","forEach","value","key","unregister","undefined"],"mappings":";;AAAA;AACA,IAAMA,yBAAyB,GAAG,IAAlC;AACA,WAAaC,yBAAb;AACE,uCAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACD;;AAHH;AAAA;AAAA,WAKE,kBAASC,MAAT,EAAiBC,WAAjB,EAA8BC,eAA9B,EAA+C;AAAA;;AAC7C,UAAI,CAAC,KAAKJ,QAAV,EAAoB;AAClB,aAAKA,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACD;;AAED,UAAMI,OAAO,GAAGC,UAAU,CAAC,YAAM;AAC/B,YAAI,OAAOH,WAAP,KAAuB,UAA3B,EAAuC;AACrCA,UAAAA,WAAW;AACZ;;AAED,QAAA,KAAI,CAACH,QAAL,CAAcO,MAAd,CAAqBH,eAAe,CAACI,YAArC;AACD,OANyB,EAMvBV,yBANuB,CAA1B;AAOA,WAAKE,QAAL,CAAcS,GAAd,CAAkBL,eAAe,CAACI,YAAlC,EAAgDH,OAAhD;AACD;AAlBH;AAAA;AAAA,WAoBE,oBAAWD,eAAX,EAA4B;AAC1B,UAAMC,OAAO,GAAG,KAAKL,QAAL,CAAcU,GAAd,CAAkBN,eAAe,CAACI,YAAlC,CAAhB;;AAEA,UAAIH,OAAJ,EAAa;AACX,aAAKL,QAAL,CAAcO,MAAd,CAAqBH,eAAe,CAACI,YAArC;AACAG,QAAAA,YAAY,CAACN,OAAD,CAAZ;AACD;AACF;AA3BH;AAAA;AAAA,WA6BE,iBAAQ;AAAA;;AACN,UAAI,KAAKL,QAAT,EAAmB;AACjB,aAAKA,QAAL,CAAcY,OAAd,CAAsB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACpC,UAAA,MAAI,CAACC,UAAL,CAAgB;AACdP,YAAAA,YAAY,EAAEM;AADA,WAAhB;AAGD,SAJD;AAKA,aAAKd,QAAL,GAAgBgB,SAAhB;AACD;AACF;AAtCH;;AAAA;AAAA","sourcesContent":["// If no effect ran after this amount of time, we assume that the render was not committed by React\nconst CLEANUP_TIMER_LOOP_MILLIS = 1000;\nexport class TimerBasedCleanupTracking {\n  constructor() {\n    this.timeouts = new Map();\n  }\n\n  register(object, unsubscribe, unregisterToken) {\n    if (!this.timeouts) {\n      this.timeouts = new Map();\n    }\n\n    const timeout = setTimeout(() => {\n      if (typeof unsubscribe === 'function') {\n        unsubscribe();\n      }\n\n      this.timeouts.delete(unregisterToken.cleanupToken);\n    }, CLEANUP_TIMER_LOOP_MILLIS);\n    this.timeouts.set(unregisterToken.cleanupToken, timeout);\n  }\n\n  unregister(unregisterToken) {\n    const timeout = this.timeouts.get(unregisterToken.cleanupToken);\n\n    if (timeout) {\n      this.timeouts.delete(unregisterToken.cleanupToken);\n      clearTimeout(timeout);\n    }\n  }\n\n  reset() {\n    if (this.timeouts) {\n      this.timeouts.forEach((value, key) => {\n        this.unregister({\n          cleanupToken: key\n        });\n      });\n      this.timeouts = undefined;\n    }\n  }\n\n}"]},"metadata":{},"sourceType":"module"}