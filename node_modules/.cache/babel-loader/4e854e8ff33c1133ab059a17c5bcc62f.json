{"ast":null,"code":"export var buildWarning = function buildWarning(message) {\n  var gravity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'warning';\n  var alreadyWarned = false;\n  var cleanMessage = Array.isArray(message) ? message.join('\\n') : message;\n  return function () {\n    if (!alreadyWarned) {\n      alreadyWarned = true;\n\n      if (gravity === 'error') {\n        console.error(cleanMessage);\n      } else {\n        console.warn(cleanMessage);\n      }\n    }\n  };\n};\nexport var wrapWithWarningOnCall = function wrapWithWarningOnCall(method, message) {\n  if (process.env.NODE_ENV === 'production') {\n    return method;\n  }\n\n  var warning = buildWarning(message);\n  return function () {\n    warning();\n    return method.apply(void 0, arguments);\n  };\n};","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/utils/warning.js"],"names":["buildWarning","message","gravity","alreadyWarned","cleanMessage","Array","isArray","join","console","error","warn","wrapWithWarningOnCall","method","process","env","NODE_ENV","warning"],"mappings":"AAAA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAkC;AAAA,MAAxBC,OAAwB,uEAAd,SAAc;AAC5D,MAAIC,aAAa,GAAG,KAApB;AACA,MAAMC,YAAY,GAAGC,KAAK,CAACC,OAAN,CAAcL,OAAd,IAAyBA,OAAO,CAACM,IAAR,CAAa,IAAb,CAAzB,GAA8CN,OAAnE;AACA,SAAO,YAAM;AACX,QAAI,CAACE,aAAL,EAAoB;AAClBA,MAAAA,aAAa,GAAG,IAAhB;;AAEA,UAAID,OAAO,KAAK,OAAhB,EAAyB;AACvBM,QAAAA,OAAO,CAACC,KAAR,CAAcL,YAAd;AACD,OAFD,MAEO;AACLI,QAAAA,OAAO,CAACE,IAAR,CAAaN,YAAb;AACD;AACF;AACF,GAVD;AAWD,CAdM;AAeP,OAAO,IAAMO,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,MAAD,EAASX,OAAT,EAAqB;AACxD,MAAIY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,WAAOH,MAAP;AACD;;AAED,MAAMI,OAAO,GAAGhB,YAAY,CAACC,OAAD,CAA5B;AACA,SAAO,YAAa;AAClBe,IAAAA,OAAO;AACP,WAAOJ,MAAM,MAAN,mBAAP;AACD,GAHD;AAID,CAVM","sourcesContent":["export const buildWarning = (message, gravity = 'warning') => {\n  let alreadyWarned = false;\n  const cleanMessage = Array.isArray(message) ? message.join('\\n') : message;\n  return () => {\n    if (!alreadyWarned) {\n      alreadyWarned = true;\n\n      if (gravity === 'error') {\n        console.error(cleanMessage);\n      } else {\n        console.warn(cleanMessage);\n      }\n    }\n  };\n};\nexport const wrapWithWarningOnCall = (method, message) => {\n  if (process.env.NODE_ENV === 'production') {\n    return method;\n  }\n\n  const warning = buildWarning(message);\n  return (...args) => {\n    warning();\n    return method(...args);\n  };\n};"]},"metadata":{},"sourceType":"module"}