{"ast":null,"code":"var _jsxFileName = \"C:\\\\pproject-files\\\\new-app\\\\src\\\\new-components\\\\TableMUI.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { DataGrid } from '@mui/x-data-grid';\nimport Button from '@mui/material/Button';\nimport { GridColDef, GridApi, GridCellValue } from '@mui/x-data-grid';\nimport AlertDialog from \"./AlertDialog\";\nimport PaperComponent from \"./PaperComponent\";\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [open, setOpen] = useState(false);\n\nconst handleClickOpen = () => {\n  setOpen(true);\n};\n\nconst handleClose = () => {\n  setOpen(false);\n};\n\nconst columns = [{\n  field: \"id\",\n  headerName: \"ID\"\n}, {\n  field: \"name\",\n  headerName: \"Name\",\n  width: 200\n}, {\n  field: \"username\",\n  headerName: \"User Name\",\n  width: 200\n}, {\n  field: \"email\",\n  headerName: \"Email\",\n  width: 300\n}, {\n  field: \"phone\",\n  headerName: \"Phone\",\n  width: 250\n}, {\n  field: \"website\",\n  headerName: \"Website\",\n  width: 200\n}, {\n  field: 'action',\n  headerName: 'Action',\n  sortable: false,\n  renderCell: params => {\n    const onClick = x => {\n      x.stopPropagation(); // don't select this row after clicking\n\n      const api = params.api;\n      const thisRow = {};\n      api.getAllColumns().filter(c => c.field !== '__check__' && !!c).forEach(c => thisRow[c.field] = params.getValue(params.id, c.field));\n      return alert(JSON.stringify(thisRow, null, 4));\n    }; // return <Button variant=\"outlined\" color=\"secondary\" onClick={onClick} >Details</Button>;\n\n\n    return /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      color: \"secondary\",\n      onClick: handleClickOpen,\n      children: \"Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 20\n    }, this);\n  }\n}];\n\nfunction TableMUI() {\n  _s();\n\n  const [tableData, setTableData] = useState([]);\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(data => setTableData(data)).catch(error => console.log(\"Error =>\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 650,\n      width: '90%',\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: tableData,\n      columns: columns,\n      pageSize: 10,\n      initialState: {\n        sorting: {\n          sortModel: [{\n            field: '',\n            sort: 'asc'\n          }]\n        },\n        filter: {\n          filterModel: {\n            items: [{\n              columnField: '',\n              operatorValue: '>',\n              value: ''\n            }]\n          }\n        }\n      } // checkboxSelection\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TableMUI, \"qcVQMfdRY2vxgSp5dutEfuJRk7k=\");\n\n_c = TableMUI;\nexport default TableMUI;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableMUI\");","map":{"version":3,"sources":["C:/pproject-files/new-app/src/new-components/TableMUI.jsx"],"names":["React","useState","useEffect","DataGrid","Button","GridColDef","GridApi","GridCellValue","AlertDialog","PaperComponent","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","open","setOpen","handleClickOpen","handleClose","columns","field","headerName","width","sortable","renderCell","params","onClick","x","stopPropagation","api","thisRow","getAllColumns","filter","c","forEach","getValue","id","alert","JSON","stringify","TableMUI","tableData","setTableData","fetch","then","response","json","data","catch","error","console","log","height","textAlign","sorting","sortModel","sort","filterModel","items","columnField","operatorValue","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport Button from '@mui/material/Button';\r\nimport { GridColDef, GridApi, GridCellValue } from '@mui/x-data-grid';\r\nimport AlertDialog from \"./AlertDialog\";\r\nimport PaperComponent from \"./PaperComponent\";\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nconst [open, setOpen] = useState(false);\r\n          \r\n            const handleClickOpen = () => {\r\n              setOpen(true);\r\n            };\r\n          \r\n            const handleClose = () => {\r\n              setOpen(false);\r\n            };\r\n\r\n\r\n\r\n\r\nconst columns = [\r\n    {field: \"id\", headerName: \"ID\"},\r\n    {field: \"name\", headerName: \"Name\", width: 200},\r\n    {field: \"username\", headerName: \"User Name\", width: 200},\r\n    {field: \"email\", headerName: \"Email\", width: 300},\r\n    {field: \"phone\", headerName: \"Phone\", width: 250},\r\n    {field: \"website\", headerName: \"Website\", width: 200},\r\n\r\n    {\r\n    field: 'action',\r\n    headerName: 'Action',\r\n    sortable: false,\r\n    renderCell: (params) => {\r\n      const onClick = (x) => {\r\n        x.stopPropagation(); // don't select this row after clicking\r\n\r\n        const api: GridApi = params.api;\r\n        const thisRow: Record <string, GridCellValue> = {};\r\n\r\n        api\r\n          .getAllColumns()\r\n          .filter((c) => c.field !== '__check__' && !!c)\r\n          .forEach((c) => (thisRow[c.field] = params.getValue(params.id, c.field)));\r\n\r\n            return alert(JSON.stringify(thisRow, null, 4));\r\n            };\r\n\r\n            // return <Button variant=\"outlined\" color=\"secondary\" onClick={onClick} >Details</Button>;\r\n            return <Button variant=\"outlined\" color=\"secondary\" onClick={handleClickOpen} >Details</Button>;\r\n            },\r\n        }, \r\n\r\n            \r\n]\r\n\r\n\r\nfunction TableMUI() {\r\n\r\n    const [tableData, setTableData] = useState([])\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => response.json())\r\n        .then(data => setTableData(data))\r\n        .catch(error => console.log(\"Error =>\", error)); \r\n    }, [])\r\n\r\n    return(\r\n\r\n        <div style={{height: 650, width: '90%', textAlign: \"center\"}}>\r\n\r\n            <DataGrid \r\n                rows={tableData}\r\n                columns={columns}\r\n                pageSize={10}\r\n                initialState={{\r\n                    sorting: {\r\n                        sortModel: [{ field: '', sort: 'asc' }],\r\n                    },\r\n                    filter: {\r\n                        filterModel: {\r\n                            items: [{ columnField: '', operatorValue: '>', value: '' }],\r\n                        },\r\n                    },\r\n                }}\r\n                // checkboxSelection\r\n            />\r\n\r\n            <br />\r\n\r\n            {/* <AlertDialog /> */}\r\n\r\n            <br />\r\n\r\n            {/* <PaperComponent /> */}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TableMUI;"]},"metadata":{},"sourceType":"module"}