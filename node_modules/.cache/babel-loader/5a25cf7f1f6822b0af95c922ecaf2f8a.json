{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nexport var rowsMetaStateInitializer = function rowsMetaStateInitializer(state) {\n  return _extends({}, state, {\n    rowsMeta: {\n      currentPageTotalHeight: 0,\n      positions: []\n    }\n  });\n};\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport var useGridRowsMeta = function useGridRowsMeta(apiRef, props) {\n  var getRowHeight = props.getRowHeight,\n      getRowSpacing = props.getRowSpacing;\n  var rowsHeightLookup = React.useRef({});\n  var rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  var filterState = useGridSelector(apiRef, gridFilterStateSelector);\n  var paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  var sortingState = useGridSelector(apiRef, gridSortingStateSelector);\n  var currentPage = useGridVisibleRows(apiRef, props);\n  var hydrateRowsMeta = React.useCallback(function () {\n    apiRef.current.setState(function (state) {\n      var positions = [];\n      var densityFactor = gridDensityFactorSelector(state, apiRef.current.instanceId);\n      var currentRowHeight = gridDensityRowHeightSelector(state, apiRef.current.instanceId);\n      var currentPageTotalHeight = currentPage.rows.reduce(function (acc, row) {\n        positions.push(acc);\n        var baseRowHeight;\n        var isResized = rowsHeightLookup.current[row.id] && rowsHeightLookup.current[row.id].isResized || false;\n\n        if (isResized) {\n          // do not recalculate resized row height and use the value from the lookup\n          baseRowHeight = rowsHeightLookup.current[row.id].value;\n        } else {\n          baseRowHeight = currentRowHeight;\n\n          if (getRowHeight) {\n            var _getRowHeight; // Default back to base rowHeight if getRowHeight returns null or undefined.\n\n\n            baseRowHeight = (_getRowHeight = getRowHeight(_extends({}, row, {\n              densityFactor: densityFactor\n            }))) != null ? _getRowHeight : currentRowHeight;\n          }\n        } // We use an object to make simple to check if a height is already added or not\n\n\n        var initialHeights = {\n          base: baseRowHeight\n        };\n\n        if (getRowSpacing) {\n          var _spacing$top, _spacing$bottom;\n\n          var index = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n          var spacing = getRowSpacing(_extends({}, row, {\n            isFirstVisible: index === 0,\n            isLastVisible: index === currentPage.rows.length - 1\n          }));\n          initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n          initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n        }\n\n        var sizes = apiRef.current.unstable_applyPreProcessors('rowHeight', initialHeights, row);\n        var finalRowHeight = Object.values(sizes).reduce(function (acc2, value) {\n          return acc2 + value;\n        }, 0);\n        rowsHeightLookup.current[row.id] = {\n          value: baseRowHeight,\n          sizes: sizes,\n          isResized: isResized\n        };\n        return acc + finalRowHeight;\n      }, 0);\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight: currentPageTotalHeight,\n          positions: positions\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, getRowSpacing, getRowHeight]);\n\n  var getTargetRowHeight = function getTargetRowHeight(rowId) {\n    var _rowsHeightLookup$cur;\n\n    return ((_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.value) || rowHeight;\n  };\n\n  var getRowInternalSizes = function getRowInternalSizes(rowId) {\n    var _rowsHeightLookup$cur2;\n\n    return (_rowsHeightLookup$cur2 = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur2.sizes;\n  };\n\n  var setRowHeight = React.useCallback(function (id, height) {\n    rowsHeightLookup.current[id] = {\n      value: height,\n      isResized: true,\n      sizes: _extends({}, rowsHeightLookup.current[id].sizes, {\n        base: height\n      })\n    };\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(function () {\n    hydrateRowsMeta();\n  }, [rowHeight, filterState, paginationState, sortingState, hydrateRowsMeta]);\n  var handlePreProcessorRegister = React.useCallback(function (name) {\n    if (name !== 'rowHeight') {\n      return;\n    }\n\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  useGridApiEventHandler(apiRef, GridEvents.preProcessorRegister, handlePreProcessorRegister);\n  var rowsMetaApi = {\n    unstable_getRowHeight: getTargetRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\n};","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js"],"names":["_extends","React","useGridVisibleRows","useGridApiMethod","useGridSelector","gridDensityRowHeightSelector","gridDensityFactorSelector","gridFilterStateSelector","gridPaginationSelector","gridSortingStateSelector","GridEvents","useGridApiEventHandler","rowsMetaStateInitializer","state","rowsMeta","currentPageTotalHeight","positions","useGridRowsMeta","apiRef","props","getRowHeight","getRowSpacing","rowsHeightLookup","useRef","rowHeight","filterState","paginationState","sortingState","currentPage","hydrateRowsMeta","useCallback","current","setState","densityFactor","instanceId","currentRowHeight","rows","reduce","acc","row","push","baseRowHeight","isResized","id","value","_getRowHeight","initialHeights","base","_spacing$top","_spacing$bottom","index","getRowIndexRelativeToVisibleRows","spacing","isFirstVisible","isLastVisible","length","spacingTop","top","spacingBottom","bottom","sizes","unstable_applyPreProcessors","finalRowHeight","Object","values","acc2","forceUpdate","getTargetRowHeight","rowId","_rowsHeightLookup$cur","getRowInternalSizes","_rowsHeightLookup$cur2","setRowHeight","height","useEffect","handlePreProcessorRegister","name","preProcessorRegister","rowsMetaApi","unstable_getRowHeight","unstable_getRowInternalSizes","unstable_setRowHeight"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight,\n    getRowSpacing\n  } = props;\n  const rowsHeightLookup = React.useRef({});\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const filterState = useGridSelector(apiRef, gridFilterStateSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortingState = useGridSelector(apiRef, gridSortingStateSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const hydrateRowsMeta = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const positions = [];\n      const densityFactor = gridDensityFactorSelector(state, apiRef.current.instanceId);\n      const currentRowHeight = gridDensityRowHeightSelector(state, apiRef.current.instanceId);\n      const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n        positions.push(acc);\n        let baseRowHeight;\n        const isResized = rowsHeightLookup.current[row.id] && rowsHeightLookup.current[row.id].isResized || false;\n\n        if (isResized) {\n          // do not recalculate resized row height and use the value from the lookup\n          baseRowHeight = rowsHeightLookup.current[row.id].value;\n        } else {\n          baseRowHeight = currentRowHeight;\n\n          if (getRowHeight) {\n            var _getRowHeight;\n\n            // Default back to base rowHeight if getRowHeight returns null or undefined.\n            baseRowHeight = (_getRowHeight = getRowHeight(_extends({}, row, {\n              densityFactor\n            }))) != null ? _getRowHeight : currentRowHeight;\n          }\n        } // We use an object to make simple to check if a height is already added or not\n\n\n        const initialHeights = {\n          base: baseRowHeight\n        };\n\n        if (getRowSpacing) {\n          var _spacing$top, _spacing$bottom;\n\n          const index = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n          const spacing = getRowSpacing(_extends({}, row, {\n            isFirstVisible: index === 0,\n            isLastVisible: index === currentPage.rows.length - 1\n          }));\n          initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n          initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n        }\n\n        const sizes = apiRef.current.unstable_applyPreProcessors('rowHeight', initialHeights, row);\n        const finalRowHeight = Object.values(sizes).reduce((acc2, value) => acc2 + value, 0);\n        rowsHeightLookup.current[row.id] = {\n          value: baseRowHeight,\n          sizes,\n          isResized\n        };\n        return acc + finalRowHeight;\n      }, 0);\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, getRowSpacing, getRowHeight]);\n\n  const getTargetRowHeight = rowId => {\n    var _rowsHeightLookup$cur;\n\n    return ((_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.value) || rowHeight;\n  };\n\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur2;\n\n    return (_rowsHeightLookup$cur2 = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur2.sizes;\n  };\n\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id] = {\n      value: height,\n      isResized: true,\n      sizes: _extends({}, rowsHeightLookup.current[id].sizes, {\n        base: height\n      })\n    };\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeight, filterState, paginationState, sortingState, hydrateRowsMeta]);\n  const handlePreProcessorRegister = React.useCallback(name => {\n    if (name !== 'rowHeight') {\n      return;\n    }\n\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  useGridApiEventHandler(apiRef, GridEvents.preProcessorRegister, handlePreProcessorRegister);\n  const rowsMetaApi = {\n    unstable_getRowHeight: getTargetRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\n};"]},"metadata":{},"sourceType":"module"}