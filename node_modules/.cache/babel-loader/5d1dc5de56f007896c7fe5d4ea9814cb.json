{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { GridEvents } from '../../../models/events';\nimport { gridVisibleTopLevelRowCountSelector } from '../filter';\nimport { gridPageSelector } from './gridPaginationSelector';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\nimport { buildWarning } from '../../../utils/warning';\nexport const getPageCount = (rowCount, pageSize) => {\n  if (pageSize > 0 && rowCount > 0) {\n    return Math.ceil(rowCount / pageSize);\n  }\n\n  return 0;\n};\n\nconst applyValidPage = paginationState => {\n  if (!paginationState.pageCount) {\n    return paginationState;\n  }\n\n  return _extends({}, paginationState, {\n    page: Math.max(Math.min(paginationState.page, paginationState.pageCount - 1), 0)\n  });\n};\n\nconst mergeStateWithPage = page => state => _extends({}, state, {\n  pagination: applyValidPage(_extends({}, state.pagination, {\n    page\n  }))\n});\n\nconst noRowCountInServerMode = buildWarning([\"MUI: the 'rowCount' prop is undefined while using paginationMode='server'\", 'For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation'], 'error');\n/**\n * @requires useGridPageSize (event)\n */\n\nexport const useGridPage = (apiRef, props) => {\n  var _props$initialState2, _props$initialState2$;\n\n  const logger = useGridLogger(apiRef, 'useGridPage');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridVisibleTopLevelRowCountSelector);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'page',\n    propModel: props.page,\n    propOnChange: props.onPageChange,\n    stateSelector: gridPageSelector,\n    changeEvent: GridEvents.pageChange\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPage = React.useCallback(page => {\n    logger.debug(`Setting page to ${page}`);\n    apiRef.current.setState(mergeStateWithPage(page));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const pageApi = {\n    setPage\n  };\n  useGridApiMethod(apiRef, pageApi, 'GridPageApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    var _props$initialState, _props$initialState$p;\n\n    const pageToExport = gridPageSelector(apiRef);\n    const shouldExportPage = // Always export if the page is controlled\n    props.page != null || // Always export if the page has been initialized\n    ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.page) != null || // Export if the page value is not equal to the default value\n    pageToExport !== 0;\n\n    if (!shouldExportPage) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        page: pageToExport\n      })\n    });\n  }, [apiRef, props.page, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.page]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto, _context$stateToResto2; // We apply the constraint even if the page did not change in case the pageSize changed.\n\n\n    const page = (_context$stateToResto = (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.page) != null ? _context$stateToResto : gridPageSelector(apiRef);\n    apiRef.current.setState(mergeStateWithPage(page));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handlePageSizeChange = pageSize => {\n    apiRef.current.setState(state => {\n      const pageCount = getPageCount(state.pagination.rowCount, pageSize);\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          pageCount,\n          page: state.pagination.page\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  };\n\n  useGridApiEventHandler(apiRef, GridEvents.pageSizeChange, handlePageSizeChange);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (props.paginationMode === 'server' && props.rowCount == null) {\n        noRowCountInServerMode();\n      }\n    }\n  }, [props.rowCount, props.paginationMode]);\n  React.useEffect(() => {\n    apiRef.current.setState(state => {\n      const rowCount = props.rowCount !== undefined ? props.rowCount : visibleTopLevelRowCount;\n      const pageCount = getPageCount(rowCount, state.pagination.pageSize);\n      const page = props.page == null ? state.pagination.page : props.page;\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          page,\n          rowCount,\n          pageCount\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [visibleTopLevelRowCount, props.rowCount, props.page, props.paginationMode, apiRef]);\n};","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPage.js"],"names":["_extends","React","useGridLogger","useGridSelector","useGridApiMethod","useGridApiEventHandler","GridEvents","gridVisibleTopLevelRowCountSelector","gridPageSelector","useGridRegisterPreProcessor","buildWarning","getPageCount","rowCount","pageSize","Math","ceil","applyValidPage","paginationState","pageCount","page","max","min","mergeStateWithPage","state","pagination","noRowCountInServerMode","useGridPage","apiRef","props","_props$initialState2","_props$initialState2$","logger","visibleTopLevelRowCount","current","unstable_updateControlState","stateId","propModel","propOnChange","onPageChange","stateSelector","changeEvent","pageChange","setPage","useCallback","debug","setState","forceUpdate","pageApi","stateExportPreProcessing","prevState","_props$initialState","_props$initialState$p","pageToExport","shouldExportPage","initialState","stateRestorePreProcessing","params","context","_context$stateToResto","_context$stateToResto2","stateToRestore","handlePageSizeChange","pageSizeChange","useEffect","process","env","NODE_ENV","paginationMode","undefined"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { GridEvents } from '../../../models/events';\nimport { gridVisibleTopLevelRowCountSelector } from '../filter';\nimport { gridPageSelector } from './gridPaginationSelector';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\nimport { buildWarning } from '../../../utils/warning';\nexport const getPageCount = (rowCount, pageSize) => {\n  if (pageSize > 0 && rowCount > 0) {\n    return Math.ceil(rowCount / pageSize);\n  }\n\n  return 0;\n};\n\nconst applyValidPage = paginationState => {\n  if (!paginationState.pageCount) {\n    return paginationState;\n  }\n\n  return _extends({}, paginationState, {\n    page: Math.max(Math.min(paginationState.page, paginationState.pageCount - 1), 0)\n  });\n};\n\nconst mergeStateWithPage = page => state => _extends({}, state, {\n  pagination: applyValidPage(_extends({}, state.pagination, {\n    page\n  }))\n});\n\nconst noRowCountInServerMode = buildWarning([\"MUI: the 'rowCount' prop is undefined while using paginationMode='server'\", 'For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation'], 'error');\n/**\n * @requires useGridPageSize (event)\n */\n\nexport const useGridPage = (apiRef, props) => {\n  var _props$initialState2, _props$initialState2$;\n\n  const logger = useGridLogger(apiRef, 'useGridPage');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridVisibleTopLevelRowCountSelector);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'page',\n    propModel: props.page,\n    propOnChange: props.onPageChange,\n    stateSelector: gridPageSelector,\n    changeEvent: GridEvents.pageChange\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPage = React.useCallback(page => {\n    logger.debug(`Setting page to ${page}`);\n    apiRef.current.setState(mergeStateWithPage(page));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const pageApi = {\n    setPage\n  };\n  useGridApiMethod(apiRef, pageApi, 'GridPageApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    var _props$initialState, _props$initialState$p;\n\n    const pageToExport = gridPageSelector(apiRef);\n    const shouldExportPage = // Always export if the page is controlled\n    props.page != null || // Always export if the page has been initialized\n    ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.page) != null || // Export if the page value is not equal to the default value\n    pageToExport !== 0;\n\n    if (!shouldExportPage) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        page: pageToExport\n      })\n    });\n  }, [apiRef, props.page, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.page]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto, _context$stateToResto2;\n\n    // We apply the constraint even if the page did not change in case the pageSize changed.\n    const page = (_context$stateToResto = (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.page) != null ? _context$stateToResto : gridPageSelector(apiRef);\n    apiRef.current.setState(mergeStateWithPage(page));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handlePageSizeChange = pageSize => {\n    apiRef.current.setState(state => {\n      const pageCount = getPageCount(state.pagination.rowCount, pageSize);\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          pageCount,\n          page: state.pagination.page\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  };\n\n  useGridApiEventHandler(apiRef, GridEvents.pageSizeChange, handlePageSizeChange);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (props.paginationMode === 'server' && props.rowCount == null) {\n        noRowCountInServerMode();\n      }\n    }\n  }, [props.rowCount, props.paginationMode]);\n  React.useEffect(() => {\n    apiRef.current.setState(state => {\n      const rowCount = props.rowCount !== undefined ? props.rowCount : visibleTopLevelRowCount;\n      const pageCount = getPageCount(rowCount, state.pagination.pageSize);\n      const page = props.page == null ? state.pagination.page : props.page;\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          page,\n          rowCount,\n          pageCount\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [visibleTopLevelRowCount, props.rowCount, props.page, props.paginationMode, apiRef]);\n};"]},"metadata":{},"sourceType":"module"}