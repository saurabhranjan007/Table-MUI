{"ast":null,"code":"import * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridVisibleSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\n/**\n * @requires useGridPage (state)\n * @requires useGridPageSize (state)\n * @requires useGridFilter (state)\n * @requires useGridColumns (state, method)\n * @requires useGridRows (state, method)\n * @requires useGridSorting (method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n */\n\nexport var useGridKeyboardNavigation = function useGridKeyboardNavigation(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  var currentPage = useGridVisibleRows(apiRef, props);\n  var goToCell = React.useCallback(function (colIndex, rowIndex) {\n    logger.debug(\"Navigating to cell row \".concat(rowIndex, \", col \").concat(colIndex));\n    apiRef.current.scrollToIndexes({\n      colIndex: colIndex,\n      rowIndex: rowIndex\n    });\n    var field = apiRef.current.getVisibleColumns()[colIndex].field;\n    var visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    var node = visibleSortedRows[rowIndex];\n    apiRef.current.setCellFocus(node.id, field);\n  }, [apiRef, logger]);\n  var goToHeader = React.useCallback(function (colIndex, event) {\n    logger.debug(\"Navigating to header col \".concat(colIndex));\n    apiRef.current.scrollToIndexes({\n      colIndex: colIndex\n    });\n    var field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  var handleCellNavigationKeyDown = React.useCallback(function (params, event) {\n    var dimensions = apiRef.current.getRootDimensions();\n\n    if (!currentPage.range || !dimensions) {\n      return;\n    }\n\n    var viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    var visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    var colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    var rowIndexBefore = visibleSortedRows.findIndex(function (row) {\n      return row.id === params.id;\n    });\n    var firstRowIndexInPage = currentPage.range.firstRowIndex;\n    var lastRowIndexInPage = currentPage.range.lastRowIndex;\n    var firstColIndex = 0;\n    var lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    var shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n      case 'Enter':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, rowIndexBefore + 1);\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, rowIndexBefore - 1);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, rowIndexBefore);\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n      case ' ':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          var nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, nextRowIndex);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, firstRowIndexInPage);\n          } else {\n            goToCell(firstColIndex, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, lastRowIndexInPage);\n          } else {\n            goToCell(lastColIndex, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPage, goToCell, goToHeader]);\n  var handleColumnHeaderKeyDown = React.useCallback(function (params, event) {\n    var _currentPage$range$fi, _currentPage$range, _currentPage$range$la, _currentPage$range2;\n\n    var headerTitleNode = event.currentTarget.querySelector(\".\".concat(gridClasses.columnHeaderTitleContainerContent));\n    var isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n\n    var dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return;\n    }\n\n    var viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    var colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    var firstRowIndexInPage = (_currentPage$range$fi = (_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) != null ? _currentPage$range$fi : null;\n    var lastRowIndexInPage = (_currentPage$range$la = (_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.lastRowIndex) != null ? _currentPage$range$la : null;\n    var firstColIndex = 0;\n    var lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    var shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, firstRowIndexInPage);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToHeader(colIndexBefore + 1, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToHeader(colIndexBefore - 1, event);\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPage, goToCell, goToHeader]);\n  useGridApiEventHandler(apiRef, GridEvents.cellNavigationKeyDown, handleCellNavigationKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderKeyDown, handleColumnHeaderKeyDown);\n};","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/hooks/features/keyboard/useGridKeyboardNavigation.js"],"names":["React","GridEvents","gridVisibleColumnDefinitionsSelector","useGridLogger","useGridApiEventHandler","gridVisibleSortedRowEntriesSelector","useGridVisibleRows","GRID_CHECKBOX_SELECTION_COL_DEF","gridClasses","useGridKeyboardNavigation","apiRef","props","logger","currentPage","goToCell","useCallback","colIndex","rowIndex","debug","current","scrollToIndexes","field","getVisibleColumns","visibleSortedRows","node","setCellFocus","id","goToHeader","event","setColumnHeaderFocus","handleCellNavigationKeyDown","params","dimensions","getRootDimensions","range","viewportPageSize","unstable_getViewportPageSize","colIndexBefore","getColumnIndex","rowIndexBefore","findIndex","row","firstRowIndexInPage","firstRowIndex","lastRowIndexInPage","lastRowIndex","firstColIndex","lastColIndex","length","shouldPreventDefault","key","shiftKey","Math","min","nextRowIndex","max","ctrlKey","metaKey","preventDefault","handleColumnHeaderKeyDown","_currentPage$range$fi","_currentPage$range","_currentPage$range$la","_currentPage$range2","headerTitleNode","currentTarget","querySelector","columnHeaderTitleContainerContent","isFromInsideContent","contains","target","toggleColumnMenu","cellNavigationKeyDown","columnHeaderKeyDown"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,oCAAT,QAAqD,gCAArD;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,sBAAT,QAAuC,oCAAvC;AACA,SAASC,mCAAT,QAAoD,8BAApD;AACA,SAASC,kBAAT,QAAmC,gCAAnC;AACA,SAASC,+BAAT,QAAgD,6CAAhD;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,MAAD,EAASC,KAAT,EAAmB;AAC1D,MAAMC,MAAM,GAAGT,aAAa,CAACO,MAAD,EAAS,2BAAT,CAA5B;AACA,MAAMG,WAAW,GAAGP,kBAAkB,CAACI,MAAD,EAASC,KAAT,CAAtC;AACA,MAAMG,QAAQ,GAAGd,KAAK,CAACe,WAAN,CAAkB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACzDL,IAAAA,MAAM,CAACM,KAAP,kCAAuCD,QAAvC,mBAAwDD,QAAxD;AACAN,IAAAA,MAAM,CAACS,OAAP,CAAeC,eAAf,CAA+B;AAC7BJ,MAAAA,QAAQ,EAARA,QAD6B;AAE7BC,MAAAA,QAAQ,EAARA;AAF6B,KAA/B;AAIA,QAAMI,KAAK,GAAGX,MAAM,CAACS,OAAP,CAAeG,iBAAf,GAAmCN,QAAnC,EAA6CK,KAA3D;AACA,QAAME,iBAAiB,GAAGlB,mCAAmC,CAACK,MAAD,CAA7D;AACA,QAAMc,IAAI,GAAGD,iBAAiB,CAACN,QAAD,CAA9B;AACAP,IAAAA,MAAM,CAACS,OAAP,CAAeM,YAAf,CAA4BD,IAAI,CAACE,EAAjC,EAAqCL,KAArC;AACD,GAVgB,EAUd,CAACX,MAAD,EAASE,MAAT,CAVc,CAAjB;AAWA,MAAMe,UAAU,GAAG3B,KAAK,CAACe,WAAN,CAAkB,UAACC,QAAD,EAAWY,KAAX,EAAqB;AACxDhB,IAAAA,MAAM,CAACM,KAAP,oCAAyCF,QAAzC;AACAN,IAAAA,MAAM,CAACS,OAAP,CAAeC,eAAf,CAA+B;AAC7BJ,MAAAA,QAAQ,EAARA;AAD6B,KAA/B;AAGA,QAAMK,KAAK,GAAGX,MAAM,CAACS,OAAP,CAAeG,iBAAf,GAAmCN,QAAnC,EAA6CK,KAA3D;AACAX,IAAAA,MAAM,CAACS,OAAP,CAAeU,oBAAf,CAAoCR,KAApC,EAA2CO,KAA3C;AACD,GAPkB,EAOhB,CAAClB,MAAD,EAASE,MAAT,CAPgB,CAAnB;AAQA,MAAMkB,2BAA2B,GAAG9B,KAAK,CAACe,WAAN,CAAkB,UAACgB,MAAD,EAASH,KAAT,EAAmB;AACvE,QAAMI,UAAU,GAAGtB,MAAM,CAACS,OAAP,CAAec,iBAAf,EAAnB;;AAEA,QAAI,CAACpB,WAAW,CAACqB,KAAb,IAAsB,CAACF,UAA3B,EAAuC;AACrC;AACD;;AAED,QAAMG,gBAAgB,GAAGzB,MAAM,CAACS,OAAP,CAAeiB,4BAAf,EAAzB;AACA,QAAMb,iBAAiB,GAAGlB,mCAAmC,CAACK,MAAD,CAA7D;AACA,QAAM2B,cAAc,GAAGN,MAAM,CAACV,KAAP,GAAeX,MAAM,CAACS,OAAP,CAAemB,cAAf,CAA8BP,MAAM,CAACV,KAArC,CAAf,GAA6D,CAApF;AACA,QAAMkB,cAAc,GAAGhB,iBAAiB,CAACiB,SAAlB,CAA4B,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACf,EAAJ,KAAWK,MAAM,CAACL,EAAtB;AAAA,KAA/B,CAAvB;AACA,QAAMgB,mBAAmB,GAAG7B,WAAW,CAACqB,KAAZ,CAAkBS,aAA9C;AACA,QAAMC,kBAAkB,GAAG/B,WAAW,CAACqB,KAAZ,CAAkBW,YAA7C;AACA,QAAMC,aAAa,GAAG,CAAtB;AACA,QAAMC,YAAY,GAAG7C,oCAAoC,CAACQ,MAAD,CAApC,CAA6CsC,MAA7C,GAAsD,CAA3E;AACA,QAAIC,oBAAoB,GAAG,IAA3B;;AAEA,YAAQrB,KAAK,CAACsB,GAAd;AACE,WAAK,WAAL;AACA,WAAK,OAAL;AACE;AACE;AACA,cAAIX,cAAc,GAAGK,kBAArB,EAAyC;AACvC9B,YAAAA,QAAQ,CAACuB,cAAD,EAAiBE,cAAc,GAAG,CAAlC,CAAR;AACD;;AAED;AACD;;AAEH,WAAK,SAAL;AACE;AACE,cAAIA,cAAc,GAAGG,mBAArB,EAA0C;AACxC5B,YAAAA,QAAQ,CAACuB,cAAD,EAAiBE,cAAc,GAAG,CAAlC,CAAR;AACD,WAFD,MAEO;AACLZ,YAAAA,UAAU,CAACU,cAAD,EAAiBT,KAAjB,CAAV;AACD;;AAED;AACD;;AAEH,WAAK,YAAL;AACE;AACE,cAAIS,cAAc,GAAGU,YAArB,EAAmC;AACjCjC,YAAAA,QAAQ,CAACuB,cAAc,GAAG,CAAlB,EAAqBE,cAArB,CAAR;AACD;;AAED;AACD;;AAEH,WAAK,WAAL;AACE;AACE,cAAIF,cAAc,GAAGS,aAArB,EAAoC;AAClChC,YAAAA,QAAQ,CAACuB,cAAc,GAAG,CAAlB,EAAqBE,cAArB,CAAR;AACD;;AAED;AACD;;AAEH,WAAK,KAAL;AACE;AACE;AACA,cAAIX,KAAK,CAACuB,QAAN,IAAkBd,cAAc,GAAGS,aAAvC,EAAsD;AACpDhC,YAAAA,QAAQ,CAACuB,cAAc,GAAG,CAAlB,EAAqBE,cAArB,CAAR;AACD,WAFD,MAEO,IAAI,CAACX,KAAK,CAACuB,QAAP,IAAmBd,cAAc,GAAGU,YAAxC,EAAsD;AAC3DjC,YAAAA,QAAQ,CAACuB,cAAc,GAAG,CAAlB,EAAqBE,cAArB,CAAR;AACD;;AAED;AACD;;AAEH,WAAK,UAAL;AACA,WAAK,GAAL;AACE;AACE,cAAIA,cAAc,GAAGK,kBAArB,EAAyC;AACvC9B,YAAAA,QAAQ,CAACuB,cAAD,EAAiBe,IAAI,CAACC,GAAL,CAASd,cAAc,GAAGJ,gBAA1B,EAA4CS,kBAA5C,CAAjB,CAAR;AACD;;AAED;AACD;;AAEH,WAAK,QAAL;AACE;AACE;AACA,cAAMU,YAAY,GAAGF,IAAI,CAACG,GAAL,CAAShB,cAAc,GAAGJ,gBAA1B,EAA4CO,mBAA5C,CAArB;;AAEA,cAAIY,YAAY,KAAKf,cAAjB,IAAmCe,YAAY,IAAIZ,mBAAvD,EAA4E;AAC1E5B,YAAAA,QAAQ,CAACuB,cAAD,EAAiBiB,YAAjB,CAAR;AACD,WAFD,MAEO;AACL3B,YAAAA,UAAU,CAACU,cAAD,EAAiBT,KAAjB,CAAV;AACD;;AAED;AACD;;AAEH,WAAK,MAAL;AACE;AACE,cAAIA,KAAK,CAAC4B,OAAN,IAAiB5B,KAAK,CAAC6B,OAAvB,IAAkC7B,KAAK,CAACuB,QAA5C,EAAsD;AACpDrC,YAAAA,QAAQ,CAACgC,aAAD,EAAgBJ,mBAAhB,CAAR;AACD,WAFD,MAEO;AACL5B,YAAAA,QAAQ,CAACgC,aAAD,EAAgBP,cAAhB,CAAR;AACD;;AAED;AACD;;AAEH,WAAK,KAAL;AACE;AACE,cAAIX,KAAK,CAAC4B,OAAN,IAAiB5B,KAAK,CAAC6B,OAAvB,IAAkC7B,KAAK,CAACuB,QAA5C,EAAsD;AACpDrC,YAAAA,QAAQ,CAACiC,YAAD,EAAeH,kBAAf,CAAR;AACD,WAFD,MAEO;AACL9B,YAAAA,QAAQ,CAACiC,YAAD,EAAeR,cAAf,CAAR;AACD;;AAED;AACD;;AAEH;AACE;AACEU,UAAAA,oBAAoB,GAAG,KAAvB;AACD;AAtGL;;AAyGA,QAAIA,oBAAJ,EAA0B;AACxBrB,MAAAA,KAAK,CAAC8B,cAAN;AACD;AACF,GA7HmC,EA6HjC,CAAChD,MAAD,EAASG,WAAT,EAAsBC,QAAtB,EAAgCa,UAAhC,CA7HiC,CAApC;AA8HA,MAAMgC,yBAAyB,GAAG3D,KAAK,CAACe,WAAN,CAAkB,UAACgB,MAAD,EAASH,KAAT,EAAmB;AACrE,QAAIgC,qBAAJ,EAA2BC,kBAA3B,EAA+CC,qBAA/C,EAAsEC,mBAAtE;;AAEA,QAAMC,eAAe,GAAGpC,KAAK,CAACqC,aAAN,CAAoBC,aAApB,YAAsC1D,WAAW,CAAC2D,iCAAlD,EAAxB;AACA,QAAMC,mBAAmB,GAAG,CAAC,CAACJ,eAAF,IAAqBA,eAAe,CAACK,QAAhB,CAAyBzC,KAAK,CAAC0C,MAA/B,CAAjD;;AAEA,QAAIF,mBAAmB,IAAIrC,MAAM,CAACV,KAAP,KAAiBd,+BAA+B,CAACc,KAA5E,EAAmF;AACjF;AACA;AACA;AACD;;AAED,QAAMW,UAAU,GAAGtB,MAAM,CAACS,OAAP,CAAec,iBAAf,EAAnB;;AAEA,QAAI,CAACD,UAAL,EAAiB;AACf;AACD;;AAED,QAAMG,gBAAgB,GAAGzB,MAAM,CAACS,OAAP,CAAeiB,4BAAf,EAAzB;AACA,QAAMC,cAAc,GAAGN,MAAM,CAACV,KAAP,GAAeX,MAAM,CAACS,OAAP,CAAemB,cAAf,CAA8BP,MAAM,CAACV,KAArC,CAAf,GAA6D,CAApF;AACA,QAAMqB,mBAAmB,GAAG,CAACkB,qBAAqB,GAAG,CAACC,kBAAkB,GAAGhD,WAAW,CAACqB,KAAlC,KAA4C,IAA5C,GAAmD,KAAK,CAAxD,GAA4D2B,kBAAkB,CAAClB,aAAxG,KAA0H,IAA1H,GAAiIiB,qBAAjI,GAAyJ,IAArL;AACA,QAAMhB,kBAAkB,GAAG,CAACkB,qBAAqB,GAAG,CAACC,mBAAmB,GAAGlD,WAAW,CAACqB,KAAnC,KAA6C,IAA7C,GAAoD,KAAK,CAAzD,GAA6D6B,mBAAmB,CAAClB,YAA1G,KAA2H,IAA3H,GAAkIiB,qBAAlI,GAA0J,IAArL;AACA,QAAMhB,aAAa,GAAG,CAAtB;AACA,QAAMC,YAAY,GAAG7C,oCAAoC,CAACQ,MAAD,CAApC,CAA6CsC,MAA7C,GAAsD,CAA3E;AACA,QAAIC,oBAAoB,GAAG,IAA3B;;AAEA,YAAQrB,KAAK,CAACsB,GAAd;AACE,WAAK,WAAL;AACE;AACE,cAAIR,mBAAmB,KAAK,IAA5B,EAAkC;AAChC5B,YAAAA,QAAQ,CAACuB,cAAD,EAAiBK,mBAAjB,CAAR;AACD;;AAED;AACD;;AAEH,WAAK,YAAL;AACE;AACE,cAAIL,cAAc,GAAGU,YAArB,EAAmC;AACjCpB,YAAAA,UAAU,CAACU,cAAc,GAAG,CAAlB,EAAqBT,KAArB,CAAV;AACD;;AAED;AACD;;AAEH,WAAK,WAAL;AACE;AACE,cAAIS,cAAc,GAAGS,aAArB,EAAoC;AAClCnB,YAAAA,UAAU,CAACU,cAAc,GAAG,CAAlB,EAAqBT,KAArB,CAAV;AACD;;AAED;AACD;;AAEH,WAAK,UAAL;AACE;AACE,cAAIc,mBAAmB,KAAK,IAAxB,IAAgCE,kBAAkB,KAAK,IAA3D,EAAiE;AAC/D9B,YAAAA,QAAQ,CAACuB,cAAD,EAAiBe,IAAI,CAACC,GAAL,CAASX,mBAAmB,GAAGP,gBAA/B,EAAiDS,kBAAjD,CAAjB,CAAR;AACD;;AAED;AACD;;AAEH,WAAK,MAAL;AACE;AACEjB,UAAAA,UAAU,CAACmB,aAAD,EAAgBlB,KAAhB,CAAV;AACA;AACD;;AAEH,WAAK,KAAL;AACE;AACED,UAAAA,UAAU,CAACoB,YAAD,EAAenB,KAAf,CAAV;AACA;AACD;;AAEH,WAAK,OAAL;AACE;AACE,cAAIA,KAAK,CAAC4B,OAAN,IAAiB5B,KAAK,CAAC6B,OAA3B,EAAoC;AAClC/C,YAAAA,MAAM,CAACS,OAAP,CAAeoD,gBAAf,CAAgCxC,MAAM,CAACV,KAAvC;AACD;;AAED;AACD;;AAEH,WAAK,GAAL;AACE;AACE;AACA;AACD;;AAEH;AACE;AACE4B,UAAAA,oBAAoB,GAAG,KAAvB;AACD;AAnEL;;AAsEA,QAAIA,oBAAJ,EAA0B;AACxBrB,MAAAA,KAAK,CAAC8B,cAAN;AACD;AACF,GAnGiC,EAmG/B,CAAChD,MAAD,EAASG,WAAT,EAAsBC,QAAtB,EAAgCa,UAAhC,CAnG+B,CAAlC;AAoGAvB,EAAAA,sBAAsB,CAACM,MAAD,EAAST,UAAU,CAACuE,qBAApB,EAA2C1C,2BAA3C,CAAtB;AACA1B,EAAAA,sBAAsB,CAACM,MAAD,EAAST,UAAU,CAACwE,mBAApB,EAAyCd,yBAAzC,CAAtB;AACD,CA1PM","sourcesContent":["import * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridVisibleSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\n/**\n * @requires useGridPage (state)\n * @requires useGridPageSize (state)\n * @requires useGridFilter (state)\n * @requires useGridColumns (state, method)\n * @requires useGridRows (state, method)\n * @requires useGridSorting (method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n */\n\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const goToCell = React.useCallback((colIndex, rowIndex) => {\n    logger.debug(`Navigating to cell row ${rowIndex}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    const node = visibleSortedRows[rowIndex];\n    apiRef.current.setCellFocus(node.id, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const handleCellNavigationKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!currentPage.range || !dimensions) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = visibleSortedRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = currentPage.range.firstRowIndex;\n    const lastRowIndexInPage = currentPage.range.lastRowIndex;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n      case 'Enter':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, rowIndexBefore + 1);\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, rowIndexBefore - 1);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, rowIndexBefore);\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n      case ' ':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, nextRowIndex);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, firstRowIndexInPage);\n          } else {\n            goToCell(firstColIndex, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, lastRowIndexInPage);\n          } else {\n            goToCell(lastColIndex, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPage, goToCell, goToHeader]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    var _currentPage$range$fi, _currentPage$range, _currentPage$range$la, _currentPage$range2;\n\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = (_currentPage$range$fi = (_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) != null ? _currentPage$range$fi : null;\n    const lastRowIndexInPage = (_currentPage$range$la = (_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.lastRowIndex) != null ? _currentPage$range$la : null;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, firstRowIndexInPage);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToHeader(colIndexBefore + 1, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToHeader(colIndexBefore - 1, event);\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPage, goToCell, goToHeader]);\n  useGridApiEventHandler(apiRef, GridEvents.cellNavigationKeyDown, handleCellNavigationKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderKeyDown, handleColumnHeaderKeyDown);\n};"]},"metadata":{},"sourceType":"module"}