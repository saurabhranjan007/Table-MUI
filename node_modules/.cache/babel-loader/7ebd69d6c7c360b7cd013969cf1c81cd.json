{"ast":null,"code":"import _slicedToArray from\"C:/pproject-files/new-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import{useState,useEffect}from\"react\";import{DataGrid}from'@mui/x-data-grid';import DataModal from\"./DataModal\";// import Details from \"../pages/Details\";\nimport{jsx as _jsx}from\"react/jsx-runtime\";function TableMUI(props){var _useState=useState({}),_useState2=_slicedToArray(_useState,2),selectedData=_useState2[0],setSelectedData=_useState2[1];// defining the column section of the table \nvar columns=[{field:\"id\",headerName:\"ID\",width:100},{field:\"name\",headerName:\"Name\",width:250},{field:\"username\",headerName:\"User Name\",width:200},{field:\"email\",headerName:\"Email\",width:250},{field:\"phone\",headerName:\"Phone\",width:300},{field:\"website\",headerName:\"Website\",width:200},{field:\"address\",headerName:\"City Name\",width:200,renderCell:function renderCell(params){return/*#__PURE__*/_jsx(\"div\",{children:params.row.address.city});}},{field:'action',headerName:'Action',width:120,sortable:false,renderCell:function renderCell(params){var onClick=function onClick(x){var thisRow={};// console.log('params.api.getAllColumns(): ', params.api.getAllColumns())\nparams.api.getAllColumns().forEach(function(c){thisRow[c.field]=params.getValue(params.id,c.field);// console.log(c.field , ':',params.getValue(params.id, c.field))\n});setSelectedData(thisRow);};return/*#__PURE__*/_jsx(\"div\",{onClick:onClick,children:/*#__PURE__*/_jsx(DataModal,{selectedData:selectedData})});}}];// fetching data from the API and setting it to tableData to be shown in the row section of the table\nvar _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),tableData=_useState4[0],setTableData=_useState4[1];useEffect(function(){fetch(\"https://jsonplaceholder.typicode.com/users\").then(function(response){return response.json();}).then(function(data){return setTableData(data);}).catch(function(error){return console.log(\"Error =>\",error);});},[]);// Dependency array: it basically controls when the hook gets triggered (If any variable is used inside a hook and is defined outside, then it goes in the dependency array). \n//   In case there's a variable in the dependency array. It means run the callback function everytime the given variable changes.\n//   In case of an empty dependency array, it simply means that hook will get triggered only once when the component first gets rendered. \nreturn/*#__PURE__*/_jsx(\"div\",{style:{height:650,width:'100%'},children:/*#__PURE__*/_jsx(DataGrid,{rows:tableData,columns:columns,pageSize:10,initialState:{sorting:{sortModel:[{field:'',sort:'asc'}]},filter:{filterModel:{items:[{columnField:'',operatorValue:'>',value:''}]}}}})});}export default TableMUI;","map":{"version":3,"sources":["C:/pproject-files/new-app/src/components/TableMUI.jsx"],"names":["React","useState","useEffect","DataGrid","DataModal","TableMUI","props","selectedData","setSelectedData","columns","field","headerName","width","renderCell","params","row","address","city","sortable","onClick","x","thisRow","api","getAllColumns","forEach","c","getValue","id","tableData","setTableData","fetch","then","response","json","data","catch","error","console","log","height","sorting","sortModel","sort","filter","filterModel","items","columnField","operatorValue","value"],"mappings":"+GAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,QAAT,KAAyB,kBAAzB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA;2CAGA,QAASC,CAAAA,QAAT,CAAkBC,KAAlB,CAAyB,CACrB,cAAwCL,QAAQ,CAAC,EAAD,CAAhD,wCAAOM,YAAP,eAAqBC,eAArB,eAEA;AACA,GAAMC,CAAAA,OAAO,CAAG,CACZ,CAACC,KAAK,CAAE,IAAR,CAAcC,UAAU,CAAE,IAA1B,CAAgCC,KAAK,CAAE,GAAvC,CADY,CAEZ,CAACF,KAAK,CAAE,MAAR,CAAgBC,UAAU,CAAE,MAA5B,CAAoCC,KAAK,CAAE,GAA3C,CAFY,CAGZ,CAACF,KAAK,CAAE,UAAR,CAAoBC,UAAU,CAAE,WAAhC,CAA6CC,KAAK,CAAE,GAApD,CAHY,CAIZ,CAACF,KAAK,CAAE,OAAR,CAAiBC,UAAU,CAAE,OAA7B,CAAsCC,KAAK,CAAE,GAA7C,CAJY,CAKZ,CAACF,KAAK,CAAE,OAAR,CAAiBC,UAAU,CAAE,OAA7B,CAAsCC,KAAK,CAAE,GAA7C,CALY,CAMZ,CAACF,KAAK,CAAE,SAAR,CAAmBC,UAAU,CAAE,SAA/B,CAA0CC,KAAK,CAAE,GAAjD,CANY,CAQb,CACKF,KAAK,CAAE,SADZ,CAEKC,UAAU,CAAE,WAFjB,CAGKC,KAAK,CAAE,GAHZ,CAIKC,UAAU,CAAE,oBAACC,MAAD,CAAY,CACxB,mBAAO,qBAAMA,MAAM,CAACC,GAAP,CAAWC,OAAX,CAAmBC,IAAzB,EAAP,CACC,CANN,CARa,CAiBZ,CACIP,KAAK,CAAE,QADX,CAEIC,UAAU,CAAE,QAFhB,CAGIC,KAAK,CAAE,GAHX,CAIIM,QAAQ,CAAE,KAJd,CAKIL,UAAU,CAAE,oBAACC,MAAD,CAAY,CAChB,GAAMK,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,CAAD,CAAO,CACnB,GAAMC,CAAAA,OAAO,CAAG,EAAhB,CACA;AAEAP,MAAM,CAACQ,GAAP,CAAWC,aAAX,GACKC,OADL,CACa,SAACC,CAAD,CAAO,CACZJ,OAAO,CAACI,CAAC,CAACf,KAAH,CAAP,CAAmBI,MAAM,CAACY,QAAP,CAAgBZ,MAAM,CAACa,EAAvB,CAA2BF,CAAC,CAACf,KAA7B,CAAnB,CACA;AACH,CAJL,EAKIF,eAAe,CAACa,OAAD,CAAf,CAAyB,CATjC,CAWJ,mBAAO,YAAK,OAAO,CAAEF,OAAd,uBAAuB,KAAC,SAAD,EAAW,YAAY,CAAEZ,YAAzB,EAAvB,EAAP,CACC,CAlBT,CAjBY,CAAhB,CAuCA;AACA,eAAkCN,QAAQ,CAAC,EAAD,CAA1C,yCAAO2B,SAAP,eAAkBC,YAAlB,eAEA3B,SAAS,CAAC,UAAM,CACZ4B,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACM,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADd,EAECF,IAFD,CAEM,SAAAG,IAAI,QAAIL,CAAAA,YAAY,CAACK,IAAD,CAAhB,EAFV,EAGCC,KAHD,CAGO,SAAAC,KAAK,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAwBF,KAAxB,CAAJ,EAHZ,EAIH,CALQ,CAKN,EALM,CAAT,CAOA;AACA;AACA;AAEA,mBAEI,YAAK,KAAK,CAAE,CAACG,MAAM,CAAE,GAAT,CAAc3B,KAAK,CAAE,MAArB,CAAZ,uBAEI,KAAC,QAAD,EACI,IAAI,CAAEgB,SADV,CAEI,OAAO,CAAEnB,OAFb,CAGI,QAAQ,CAAE,EAHd,CAII,YAAY,CAAE,CACV+B,OAAO,CAAE,CACLC,SAAS,CAAE,CAAC,CAAE/B,KAAK,CAAE,EAAT,CAAagC,IAAI,CAAE,KAAnB,CAAD,CADN,CADC,CAIVC,MAAM,CAAE,CACJC,WAAW,CAAE,CACTC,KAAK,CAAE,CAAC,CAAEC,WAAW,CAAE,EAAf,CAAmBC,aAAa,CAAE,GAAlC,CAAuCC,KAAK,CAAE,EAA9C,CAAD,CADE,CADT,CAJE,CAJlB,EAFJ,EAFJ,CAqBH,CAED,cAAe3C,CAAAA,QAAf","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport DataModal from \"./DataModal\"\r\n// import Details from \"../pages/Details\";\r\n\r\n\r\nfunction TableMUI(props) {\r\n    const [selectedData, setSelectedData] = useState({})\r\n\r\n    // defining the column section of the table \r\n    const columns = [\r\n        {field: \"id\", headerName: \"ID\", width: 100},\r\n        {field: \"name\", headerName: \"Name\", width: 250},\r\n        {field: \"username\", headerName: \"User Name\", width: 200},\r\n        {field: \"email\", headerName: \"Email\", width: 250},\r\n        {field: \"phone\", headerName: \"Phone\", width: 300},\r\n        {field: \"website\", headerName: \"Website\", width: 200}, \r\n\r\n       {\r\n            field: \"address\",\r\n            headerName: \"City Name\",\r\n            width: 200,\r\n            renderCell: (params) => {\r\n            return <div>{params.row.address.city}</div>;\r\n            },\r\n        },\r\n\r\n        {\r\n            field: 'action',\r\n            headerName: 'Action',\r\n            width: 120,\r\n            sortable: false,\r\n            renderCell: (params) => {\r\n                    const onClick = (x) => {\r\n                        const thisRow = {};\r\n                        // console.log('params.api.getAllColumns(): ', params.api.getAllColumns())\r\n\r\n                        params.api.getAllColumns()\r\n                            .forEach((c) => {\r\n                                thisRow[c.field] = params.getValue(params.id, c.field)\r\n                                // console.log(c.field , ':',params.getValue(params.id, c.field))\r\n                            });\r\n                            setSelectedData(thisRow)};\r\n\r\n                return <div onClick={onClick}><DataModal selectedData={selectedData}/></div>\r\n                },\r\n            }\r\n    ]\r\n\r\n    // fetching data from the API and setting it to tableData to be shown in the row section of the table\r\n    const [tableData, setTableData] = useState([])\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => response.json())\r\n        .then(data => setTableData(data))\r\n        .catch(error => console.log(\"Error =>\", error)); \r\n    }, [])\r\n\r\n    // Dependency array: it basically controls when the hook gets triggered (If any variable is used inside a hook and is defined outside, then it goes in the dependency array). \r\n    //   In case there's a variable in the dependency array. It means run the callback function everytime the given variable changes.\r\n    //   In case of an empty dependency array, it simply means that hook will get triggered only once when the component first gets rendered. \r\n\r\n    return(\r\n\r\n        <div style={{height: 650, width: '100%'}}>\r\n\r\n            <DataGrid \r\n                rows={tableData}\r\n                columns={columns}\r\n                pageSize={10}\r\n                initialState={{\r\n                    sorting: {\r\n                        sortModel: [{ field: '', sort: 'asc'}],\r\n                    },\r\n                    filter: {\r\n                        filterModel: {\r\n                            items: [{ columnField: '', operatorValue: '>', value: '' }],\r\n                        },\r\n                    },\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TableMUI;\r\n"]},"metadata":{},"sourceType":"module"}