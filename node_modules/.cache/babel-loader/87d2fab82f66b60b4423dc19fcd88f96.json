{"ast":null,"code":"import _asyncToGenerator from \"C:/pproject-files/new-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/pproject-files/new-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"C:\\\\pproject-files\\\\new-app\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"getValue\", \"hasFocus\", \"isValidating\", \"error\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport MenuItem from '@mui/material/MenuItem';\nimport { isEscapeKey } from '../../utils/keyboardUtils';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { GridEditModes } from '../../models/gridEditRowModel';\nimport { GridEvents } from '../../models/events/gridEvents';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar renderSingleSelectOptions = function renderSingleSelectOptions(option) {\n  return typeof option === 'object' ? /*#__PURE__*/_jsx(MenuItem, {\n    value: option.value,\n    children: option.label\n  }, option.value) : /*#__PURE__*/_jsx(MenuItem, {\n    value: option,\n    children: option\n  }, option);\n};\n\nfunction GridEditSingleSelectCell(props) {\n  var _rootProps$components;\n\n  var id = props.id,\n      value = props.value,\n      api = props.api,\n      field = props.field,\n      row = props.row,\n      colDef = props.colDef,\n      hasFocus = props.hasFocus,\n      error = props.error,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var ref = React.useRef();\n  var inputRef = React.useRef();\n  var rootProps = useGridRootProps();\n\n  var _React$useState = React.useState(rootProps.editMode === 'cell'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var valueOptionsFormatted;\n\n  if (typeof colDef.valueOptions === 'function') {\n    valueOptionsFormatted = colDef.valueOptions({\n      id: id,\n      row: row,\n      field: field\n    });\n  } else {\n    valueOptionsFormatted = colDef.valueOptions;\n  }\n\n  if (colDef.valueFormatter) {\n    valueOptionsFormatted = valueOptionsFormatted.map(function (option) {\n      if (typeof option === 'object') {\n        return option;\n      }\n\n      var params = {\n        field: field,\n        api: api,\n        value: option\n      };\n      return {\n        value: option,\n        label: String(colDef.valueFormatter(params))\n      };\n    });\n  }\n\n  var handleChange = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var target, isValid, canCommit, params;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setOpen(false);\n              target = event.target;\n              _context.next = 4;\n              return api.setEditCellValue({\n                id: id,\n                field: field,\n                value: target.value\n              }, event);\n\n            case 4:\n              isValid = _context.sent;\n\n              if (!(rootProps.editMode === GridEditModes.Row || isValid === false)) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return Promise.resolve(api.commitCellChange({\n                id: id,\n                field: field\n              }, event));\n\n            case 9:\n              canCommit = _context.sent;\n\n              if (canCommit) {\n                api.setCellMode(id, field, 'view');\n\n                if (event.key) {\n                  // TODO v6: remove once we stop ignoring events fired from portals\n                  params = api.getCellParams(id, field);\n                  api.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n                }\n              }\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleChange(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleClose = function handleClose(event, reason) {\n    if (rootProps.editMode === GridEditModes.Row) {\n      setOpen(false);\n      return;\n    }\n\n    if (reason === 'backdropClick' || isEscapeKey(event.key)) {\n      api.setCellMode(id, field, 'view');\n    }\n  };\n\n  var handleOpen = function handleOpen() {\n    setOpen(true);\n  };\n\n  useEnhancedEffect(function () {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return /*#__PURE__*/_jsx(rootProps.components.BaseSelect, _extends({\n    ref: ref,\n    inputRef: inputRef,\n    value: value,\n    onChange: handleChange,\n    open: open,\n    onOpen: handleOpen,\n    MenuProps: {\n      onClose: handleClose\n    },\n    error: error,\n    fullWidth: true\n  }, other, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseSelect, {\n    children: valueOptionsFormatted.map(renderSingleSelectOptions)\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridEditSingleSelectCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n  isValidating: PropTypes.bool\n} : void 0;\nexport { GridEditSingleSelectCell };\nexport var renderEditSingleSelectCell = function renderEditSingleSelectCell(params) {\n  return /*#__PURE__*/_jsx(GridEditSingleSelectCell, _extends({}, params));\n};","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/components/cell/GridEditSingleSelectCell.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_useEnhancedEffect","useEnhancedEffect","MenuItem","isEscapeKey","useGridRootProps","GridEditModes","GridEvents","jsx","_jsx","renderSingleSelectOptions","option","value","children","label","GridEditSingleSelectCell","props","_rootProps$components","id","api","field","row","colDef","hasFocus","error","other","ref","useRef","inputRef","rootProps","useState","editMode","open","setOpen","valueOptionsFormatted","valueOptions","valueFormatter","map","params","String","handleChange","event","target","setEditCellValue","isValid","Row","Promise","resolve","commitCellChange","canCommit","setCellMode","key","getCellParams","publishEvent","cellNavigationKeyDown","handleClose","reason","handleOpen","current","focus","components","BaseSelect","onChange","onOpen","MenuProps","onClose","fullWidth","componentsProps","baseSelect","process","env","NODE_ENV","propTypes","any","isRequired","isValidating","bool","renderEditSingleSelectCell"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,IAAMC,SAAS,GAAG,CAAC,IAAD,EAAO,OAAP,EAAgB,gBAAhB,EAAkC,KAAlC,EAAyC,OAAzC,EAAkD,KAAlD,EAAyD,SAAzD,EAAoE,QAApE,EAA8E,UAA9E,EAA0F,YAA1F,EAAwG,UAAxG,EAAoH,WAApH,EAAiI,UAAjI,EAA6I,UAA7I,EAAyJ,cAAzJ,EAAyK,OAAzK,CAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,0BAA0B,IAAIC,iBAAvC,QAAgE,qBAAhE;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,gBAAT,QAAiC,oCAAjC;AACA,SAASC,aAAT,QAA8B,+BAA9B;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AAEA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAAC,MAAM;AAAA,SAAI,OAAOA,MAAP,KAAkB,QAAlB,GAA6B,aAAaF,IAAI,CAACN,QAAD,EAAW;AACnGS,IAAAA,KAAK,EAAED,MAAM,CAACC,KADqF;AAEnGC,IAAAA,QAAQ,EAAEF,MAAM,CAACG;AAFkF,GAAX,EAGvFH,MAAM,CAACC,KAHgF,CAA9C,GAGzB,aAAaH,IAAI,CAACN,QAAD,EAAW;AAC7CS,IAAAA,KAAK,EAAED,MADsC;AAE7CE,IAAAA,QAAQ,EAAEF;AAFmC,GAAX,EAGjCA,MAHiC,CAHI;AAAA,CAAxC;;AAQA,SAASI,wBAAT,CAAkCC,KAAlC,EAAyC;AACvC,MAAIC,qBAAJ;;AAEA,MACEC,EADF,GASIF,KATJ,CACEE,EADF;AAAA,MAEEN,KAFF,GASII,KATJ,CAEEJ,KAFF;AAAA,MAGEO,GAHF,GASIH,KATJ,CAGEG,GAHF;AAAA,MAIEC,KAJF,GASIJ,KATJ,CAIEI,KAJF;AAAA,MAKEC,GALF,GASIL,KATJ,CAKEK,GALF;AAAA,MAMEC,MANF,GASIN,KATJ,CAMEM,MANF;AAAA,MAOEC,QAPF,GASIP,KATJ,CAOEO,QAPF;AAAA,MAQEC,KARF,GASIR,KATJ,CAQEQ,KARF;AAAA,MAUMC,KAVN,GAUc5B,6BAA6B,CAACmB,KAAD,EAAQlB,SAAR,CAV3C;;AAYA,MAAM4B,GAAG,GAAG3B,KAAK,CAAC4B,MAAN,EAAZ;AACA,MAAMC,QAAQ,GAAG7B,KAAK,CAAC4B,MAAN,EAAjB;AACA,MAAME,SAAS,GAAGxB,gBAAgB,EAAlC;;AACA,wBAAwBN,KAAK,CAAC+B,QAAN,CAAeD,SAAS,CAACE,QAAV,KAAuB,MAAtC,CAAxB;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AACA,MAAIC,qBAAJ;;AAEA,MAAI,OAAOZ,MAAM,CAACa,YAAd,KAA+B,UAAnC,EAA+C;AAC7CD,IAAAA,qBAAqB,GAAGZ,MAAM,CAACa,YAAP,CAAoB;AAC1CjB,MAAAA,EAAE,EAAFA,EAD0C;AAE1CG,MAAAA,GAAG,EAAHA,GAF0C;AAG1CD,MAAAA,KAAK,EAALA;AAH0C,KAApB,CAAxB;AAKD,GAND,MAMO;AACLc,IAAAA,qBAAqB,GAAGZ,MAAM,CAACa,YAA/B;AACD;;AAED,MAAIb,MAAM,CAACc,cAAX,EAA2B;AACzBF,IAAAA,qBAAqB,GAAGA,qBAAqB,CAACG,GAAtB,CAA0B,UAAA1B,MAAM,EAAI;AAC1D,UAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,eAAOA,MAAP;AACD;;AAED,UAAM2B,MAAM,GAAG;AACblB,QAAAA,KAAK,EAALA,KADa;AAEbD,QAAAA,GAAG,EAAHA,GAFa;AAGbP,QAAAA,KAAK,EAAED;AAHM,OAAf;AAKA,aAAO;AACLC,QAAAA,KAAK,EAAED,MADF;AAELG,QAAAA,KAAK,EAAEyB,MAAM,CAACjB,MAAM,CAACc,cAAP,CAAsBE,MAAtB,CAAD;AAFR,OAAP;AAID,KAduB,CAAxB;AAeD;;AAED,MAAME,YAAY;AAAA,wEAAG,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBR,cAAAA,OAAO,CAAC,KAAD,CAAP;AACMS,cAAAA,MAFa,GAEJD,KAAK,CAACC,MAFF;AAAA;AAAA,qBAGGvB,GAAG,CAACwB,gBAAJ,CAAqB;AACzCzB,gBAAAA,EAAE,EAAFA,EADyC;AAEzCE,gBAAAA,KAAK,EAALA,KAFyC;AAGzCR,gBAAAA,KAAK,EAAE8B,MAAM,CAAC9B;AAH2B,eAArB,EAInB6B,KAJmB,CAHH;;AAAA;AAGbG,cAAAA,OAHa;;AAAA,oBASff,SAAS,CAACE,QAAV,KAAuBzB,aAAa,CAACuC,GAArC,IAA4CD,OAAO,KAAK,KATzC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,qBAaKE,OAAO,CAACC,OAAR,CAAgB5B,GAAG,CAAC6B,gBAAJ,CAAqB;AAC3D9B,gBAAAA,EAAE,EAAFA,EAD2D;AAE3DE,gBAAAA,KAAK,EAALA;AAF2D,eAArB,EAGrCqB,KAHqC,CAAhB,CAbL;;AAAA;AAabQ,cAAAA,SAba;;AAkBnB,kBAAIA,SAAJ,EAAe;AACb9B,gBAAAA,GAAG,CAAC+B,WAAJ,CAAgBhC,EAAhB,EAAoBE,KAApB,EAA2B,MAA3B;;AAEA,oBAAIqB,KAAK,CAACU,GAAV,EAAe;AACb;AACMb,kBAAAA,MAFO,GAEEnB,GAAG,CAACiC,aAAJ,CAAkBlC,EAAlB,EAAsBE,KAAtB,CAFF;AAGbD,kBAAAA,GAAG,CAACkC,YAAJ,CAAiB9C,UAAU,CAAC+C,qBAA5B,EAAmDhB,MAAnD,EAA2DG,KAA3D;AACD;AACF;;AA1BkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZD,YAAY;AAAA;AAAA;AAAA,KAAlB;;AA6BA,MAAMe,WAAW,GAAG,SAAdA,WAAc,CAACd,KAAD,EAAQe,MAAR,EAAmB;AACrC,QAAI3B,SAAS,CAACE,QAAV,KAAuBzB,aAAa,CAACuC,GAAzC,EAA8C;AAC5CZ,MAAAA,OAAO,CAAC,KAAD,CAAP;AACA;AACD;;AAED,QAAIuB,MAAM,KAAK,eAAX,IAA8BpD,WAAW,CAACqC,KAAK,CAACU,GAAP,CAA7C,EAA0D;AACxDhC,MAAAA,GAAG,CAAC+B,WAAJ,CAAgBhC,EAAhB,EAAoBE,KAApB,EAA2B,MAA3B;AACD;AACF,GATD;;AAWA,MAAMqC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBxB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAIA/B,EAAAA,iBAAiB,CAAC,YAAM;AACtB,QAAIqB,QAAJ,EAAc;AACZK,MAAAA,QAAQ,CAAC8B,OAAT,CAAiBC,KAAjB;AACD;AACF,GAJgB,EAId,CAACpC,QAAD,CAJc,CAAjB;AAKA,SAAO,aAAad,IAAI,CAACoB,SAAS,CAAC+B,UAAV,CAAqBC,UAAtB,EAAkCjE,QAAQ,CAAC;AACjE8B,IAAAA,GAAG,EAAEA,GAD4D;AAEjEE,IAAAA,QAAQ,EAAEA,QAFuD;AAGjEhB,IAAAA,KAAK,EAAEA,KAH0D;AAIjEkD,IAAAA,QAAQ,EAAEtB,YAJuD;AAKjER,IAAAA,IAAI,EAAEA,IAL2D;AAMjE+B,IAAAA,MAAM,EAAEN,UANyD;AAOjEO,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAEV;AADA,KAPsD;AAUjE/B,IAAAA,KAAK,EAAEA,KAV0D;AAWjE0C,IAAAA,SAAS,EAAE;AAXsD,GAAD,EAY/DzC,KAZ+D,EAYxD,CAACR,qBAAqB,GAAGY,SAAS,CAACsC,eAAnC,KAAuD,IAAvD,GAA8D,KAAK,CAAnE,GAAuElD,qBAAqB,CAACmD,UAZrC,EAYiD;AACjHvD,IAAAA,QAAQ,EAAEqB,qBAAqB,CAACG,GAAtB,CAA0B3B,yBAA1B;AADuG,GAZjD,CAA1C,CAAxB;AAeD;;AAED2D,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCxD,wBAAwB,CAACyD,SAAzB,GAAqC;AAC3E;AACA;AACA;AACA;;AAEA;AACF;AACA;AACA;AACErD,EAAAA,GAAG,EAAEnB,SAAS,CAACyE,GAAV,CAAcC,UAVwD;AAW3EC,EAAAA,YAAY,EAAE3E,SAAS,CAAC4E;AAXmD,CAA7E,GAYI,KAAK,CAZT;AAaA,SAAS7D,wBAAT;AACA,OAAO,IAAM8D,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAAvC,MAAM;AAAA,SAAI,aAAa7B,IAAI,CAACM,wBAAD,EAA2BnB,QAAQ,CAAC,EAAD,EAAK0C,MAAL,CAAnC,CAArB;AAAA,CAAzC","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"getValue\", \"hasFocus\", \"isValidating\", \"error\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport MenuItem from '@mui/material/MenuItem';\nimport { isEscapeKey } from '../../utils/keyboardUtils';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { GridEditModes } from '../../models/gridEditRowModel';\nimport { GridEvents } from '../../models/events/gridEvents';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst renderSingleSelectOptions = option => typeof option === 'object' ? /*#__PURE__*/_jsx(MenuItem, {\n  value: option.value,\n  children: option.label\n}, option.value) : /*#__PURE__*/_jsx(MenuItem, {\n  value: option,\n  children: option\n}, option);\n\nfunction GridEditSingleSelectCell(props) {\n  var _rootProps$components;\n\n  const {\n    id,\n    value,\n    api,\n    field,\n    row,\n    colDef,\n    hasFocus,\n    error\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ref = React.useRef();\n  const inputRef = React.useRef();\n  const rootProps = useGridRootProps();\n  const [open, setOpen] = React.useState(rootProps.editMode === 'cell');\n  let valueOptionsFormatted;\n\n  if (typeof colDef.valueOptions === 'function') {\n    valueOptionsFormatted = colDef.valueOptions({\n      id,\n      row,\n      field\n    });\n  } else {\n    valueOptionsFormatted = colDef.valueOptions;\n  }\n\n  if (colDef.valueFormatter) {\n    valueOptionsFormatted = valueOptionsFormatted.map(option => {\n      if (typeof option === 'object') {\n        return option;\n      }\n\n      const params = {\n        field,\n        api,\n        value: option\n      };\n      return {\n        value: option,\n        label: String(colDef.valueFormatter(params))\n      };\n    });\n  }\n\n  const handleChange = async event => {\n    setOpen(false);\n    const target = event.target;\n    const isValid = await api.setEditCellValue({\n      id,\n      field,\n      value: target.value\n    }, event); // We use isValid === false because the default return is undefined which evaluates to true with !isValid\n\n    if (rootProps.editMode === GridEditModes.Row || isValid === false) {\n      return;\n    }\n\n    const canCommit = await Promise.resolve(api.commitCellChange({\n      id,\n      field\n    }, event));\n\n    if (canCommit) {\n      api.setCellMode(id, field, 'view');\n\n      if (event.key) {\n        // TODO v6: remove once we stop ignoring events fired from portals\n        const params = api.getCellParams(id, field);\n        api.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n      }\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (rootProps.editMode === GridEditModes.Row) {\n      setOpen(false);\n      return;\n    }\n\n    if (reason === 'backdropClick' || isEscapeKey(event.key)) {\n      api.setCellMode(id, field, 'view');\n    }\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return /*#__PURE__*/_jsx(rootProps.components.BaseSelect, _extends({\n    ref: ref,\n    inputRef: inputRef,\n    value: value,\n    onChange: handleChange,\n    open: open,\n    onOpen: handleOpen,\n    MenuProps: {\n      onClose: handleClose\n    },\n    error: error,\n    fullWidth: true\n  }, other, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseSelect, {\n    children: valueOptionsFormatted.map(renderSingleSelectOptions)\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridEditSingleSelectCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n  isValidating: PropTypes.bool\n} : void 0;\nexport { GridEditSingleSelectCell };\nexport const renderEditSingleSelectCell = params => /*#__PURE__*/_jsx(GridEditSingleSelectCell, _extends({}, params));"]},"metadata":{},"sourceType":"module"}