{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { gridColumnMenuSelector } from './columnMenuSelector';\nexport var columnMenuStateInitializer = function columnMenuStateInitializer(state) {\n  return _extends({}, state, {\n    columnMenu: {\n      open: false\n    }\n  });\n};\n/**\n * @requires useGridColumnResize (event)\n * @requires useGridInfiniteLoader (event)\n */\n\nexport var useGridColumnMenu = function useGridColumnMenu(apiRef) {\n  var logger = useGridLogger(apiRef, 'useGridColumnMenu');\n  /**\n   * API METHODS\n   */\n\n  var showColumnMenu = React.useCallback(function (field) {\n    var shouldUpdate = apiRef.current.setState(function (state) {\n      if (state.columnMenu.open && state.columnMenu.field === field) {\n        return state;\n      }\n\n      logger.debug('Opening Column Menu');\n      return _extends({}, state, {\n        columnMenu: {\n          open: true,\n          field: field\n        }\n      });\n    });\n\n    if (shouldUpdate) {\n      apiRef.current.hidePreferences();\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  var hideColumnMenu = React.useCallback(function () {\n    var shouldUpdate = apiRef.current.setState(function (state) {\n      if (!state.columnMenu.open && state.columnMenu.field === undefined) {\n        return state;\n      }\n\n      logger.debug('Hiding Column Menu');\n      return _extends({}, state, {\n        columnMenu: _extends({}, state.columnMenu, {\n          open: false,\n          field: undefined\n        })\n      });\n    });\n\n    if (shouldUpdate) {\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  var toggleColumnMenu = React.useCallback(function (field) {\n    logger.debug('Toggle Column Menu');\n    var columnMenu = gridColumnMenuSelector(apiRef.current.state);\n\n    if (!columnMenu.open || columnMenu.field !== field) {\n      showColumnMenu(field);\n    } else {\n      hideColumnMenu();\n    }\n  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);\n  var columnMenuApi = {\n    showColumnMenu: showColumnMenu,\n    hideColumnMenu: hideColumnMenu,\n    toggleColumnMenu: toggleColumnMenu\n  };\n  useGridApiMethod(apiRef, columnMenuApi, 'GridColumnMenuApi');\n  /**\n   * EVENTS\n   */\n\n  useGridApiEventHandler(apiRef, GridEvents.columnResizeStart, hideColumnMenu);\n  useGridApiEventHandler(apiRef, GridEvents.rowsScroll, hideColumnMenu);\n};","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenu.js"],"names":["_extends","React","GridEvents","useGridLogger","useGridApiMethod","useGridApiEventHandler","gridColumnMenuSelector","columnMenuStateInitializer","state","columnMenu","open","useGridColumnMenu","apiRef","logger","showColumnMenu","useCallback","field","shouldUpdate","current","setState","debug","hidePreferences","forceUpdate","hideColumnMenu","undefined","toggleColumnMenu","columnMenuApi","columnResizeStart","rowsScroll"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { gridColumnMenuSelector } from './columnMenuSelector';\nexport const columnMenuStateInitializer = state => _extends({}, state, {\n  columnMenu: {\n    open: false\n  }\n});\n/**\n * @requires useGridColumnResize (event)\n * @requires useGridInfiniteLoader (event)\n */\n\nexport const useGridColumnMenu = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridColumnMenu');\n  /**\n   * API METHODS\n   */\n\n  const showColumnMenu = React.useCallback(field => {\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (state.columnMenu.open && state.columnMenu.field === field) {\n        return state;\n      }\n\n      logger.debug('Opening Column Menu');\n      return _extends({}, state, {\n        columnMenu: {\n          open: true,\n          field\n        }\n      });\n    });\n\n    if (shouldUpdate) {\n      apiRef.current.hidePreferences();\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const hideColumnMenu = React.useCallback(() => {\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (!state.columnMenu.open && state.columnMenu.field === undefined) {\n        return state;\n      }\n\n      logger.debug('Hiding Column Menu');\n      return _extends({}, state, {\n        columnMenu: _extends({}, state.columnMenu, {\n          open: false,\n          field: undefined\n        })\n      });\n    });\n\n    if (shouldUpdate) {\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const toggleColumnMenu = React.useCallback(field => {\n    logger.debug('Toggle Column Menu');\n    const columnMenu = gridColumnMenuSelector(apiRef.current.state);\n\n    if (!columnMenu.open || columnMenu.field !== field) {\n      showColumnMenu(field);\n    } else {\n      hideColumnMenu();\n    }\n  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);\n  const columnMenuApi = {\n    showColumnMenu,\n    hideColumnMenu,\n    toggleColumnMenu\n  };\n  useGridApiMethod(apiRef, columnMenuApi, 'GridColumnMenuApi');\n  /**\n   * EVENTS\n   */\n\n  useGridApiEventHandler(apiRef, GridEvents.columnResizeStart, hideColumnMenu);\n  useGridApiEventHandler(apiRef, GridEvents.rowsScroll, hideColumnMenu);\n};"]},"metadata":{},"sourceType":"module"}