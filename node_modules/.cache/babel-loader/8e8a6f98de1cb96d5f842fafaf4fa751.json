{"ast":null,"code":"import _slicedToArray from \"C:/pproject-files/new-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"field\", \"colDef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { GridEvents } from '../../models/events';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridTabIndexColumnHeaderSelector } from '../../hooks/features/focus/gridFocusStateSelector';\nimport { gridSelectionStateSelector } from '../../hooks/features/selection/gridSelectionSelector';\nimport { isNavigationKey } from '../../utils/keyboardUtils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { gridVisibleSortedRowIdsSelector } from '../../hooks/features/filter/gridFilterSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../../hooks/features/pagination/gridPaginationSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    root: ['checkboxInput']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nvar GridHeaderCheckbox = /*#__PURE__*/React.forwardRef(function GridHeaderCheckbox(props, ref) {\n  var _rootProps$components;\n\n  var other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      forceUpdate = _React$useState2[1];\n\n  var apiRef = useGridApiContext();\n  var rootProps = useGridRootProps();\n  var ownerState = {\n    classes: rootProps.classes\n  };\n  var classes = useUtilityClasses(ownerState);\n  var tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  var selection = useGridSelector(apiRef, gridSelectionStateSelector);\n  var visibleRowIds = useGridSelector(apiRef, gridVisibleSortedRowIdsSelector);\n  var paginatedVisibleRowIds = useGridSelector(apiRef, gridPaginatedVisibleSortedGridRowIdsSelector);\n  var filteredSelection = React.useMemo(function () {\n    if (typeof rootProps.isRowSelectable !== 'function') {\n      return selection;\n    }\n\n    return selection.filter(function (id) {\n      // The row might have been deleted\n      if (!apiRef.current.getRow(id)) {\n        return false;\n      }\n\n      return rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n    });\n  }, [apiRef, rootProps.isRowSelectable, selection]); // All the rows that could be selected / unselected by toggling this checkbox\n\n  var selectionCandidates = React.useMemo(function () {\n    var rowIds = !rootProps.pagination || !rootProps.checkboxSelectionVisibleOnly ? visibleRowIds : paginatedVisibleRowIds; // Convert to an object to make O(1) checking if a row exists or not\n    // TODO create selector that returns visibleRowIds/paginatedVisibleRowIds as an object\n\n    return rowIds.reduce(function (acc, id) {\n      acc[id] = true;\n      return acc;\n    }, {});\n  }, [rootProps.pagination, rootProps.checkboxSelectionVisibleOnly, paginatedVisibleRowIds, visibleRowIds]); // Amount of rows selected and that are visible in the current page\n\n  var currentSelectionSize = React.useMemo(function () {\n    return filteredSelection.filter(function (id) {\n      return selectionCandidates[id];\n    }).length;\n  }, [filteredSelection, selectionCandidates]);\n  var isIndeterminate = currentSelectionSize > 0 && currentSelectionSize < Object.keys(selectionCandidates).length;\n  var isChecked = currentSelectionSize > 0;\n\n  var handleChange = function handleChange(event) {\n    var params = {\n      value: event.target.checked\n    };\n    apiRef.current.publishEvent(GridEvents.headerSelectionCheckboxChange, params);\n  };\n\n  var tabIndex = tabIndexState !== null && tabIndexState.field === props.field ? 0 : -1;\n  React.useLayoutEffect(function () {\n    var element = apiRef.current.getColumnHeaderElement(props.field);\n\n    if (tabIndex === 0 && element) {\n      element.tabIndex = -1;\n    }\n  }, [tabIndex, apiRef, props.field]);\n  var handleKeyDown = React.useCallback(function (event) {\n    if (event.key === ' ') {\n      // imperative toggle the checkbox because Space is disable by some preventDefault\n      apiRef.current.publishEvent(GridEvents.headerSelectionCheckboxChange, {\n        value: !isChecked\n      });\n    } // TODO v6 remove columnHeaderNavigationKeyDown events which are not used internally anymore\n\n\n    if (isNavigationKey(event.key) && !event.shiftKey) {\n      apiRef.current.publishEvent(GridEvents.columnHeaderNavigationKeyDown, props, event);\n    }\n  }, [apiRef, props, isChecked]);\n  var handleSelectionChange = React.useCallback(function () {\n    forceUpdate(function (p) {\n      return !p;\n    });\n  }, []);\n  React.useEffect(function () {\n    return apiRef.current.subscribeEvent(GridEvents.selectionChange, handleSelectionChange);\n  }, [apiRef, handleSelectionChange]);\n  var label = apiRef.current.getLocaleText(isChecked ? 'checkboxSelectionUnselectAllRows' : 'checkboxSelectionSelectAllRows');\n  return /*#__PURE__*/_jsx(rootProps.components.BaseCheckbox, _extends({\n    ref: ref,\n    indeterminate: isIndeterminate,\n    checked: isChecked,\n    onChange: handleChange,\n    className: classes.root,\n    color: \"primary\",\n    inputProps: {\n      'aria-label': label\n    },\n    tabIndex: tabIndex,\n    onKeyDown: handleKeyDown\n  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridHeaderCheckbox.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The column of the current header component.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the column that triggered the event\n   */\n  field: PropTypes.string.isRequired\n} : void 0;\nexport { GridHeaderCheckbox };","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/components/columnSelection/GridHeaderCheckbox.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_composeClasses","composeClasses","GridEvents","useGridSelector","gridTabIndexColumnHeaderSelector","gridSelectionStateSelector","isNavigationKey","useGridApiContext","getDataGridUtilityClass","useGridRootProps","gridVisibleSortedRowIdsSelector","gridPaginatedVisibleSortedGridRowIdsSelector","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","GridHeaderCheckbox","forwardRef","props","ref","_rootProps$components","other","useState","forceUpdate","apiRef","rootProps","tabIndexState","selection","visibleRowIds","paginatedVisibleRowIds","filteredSelection","useMemo","isRowSelectable","filter","id","current","getRow","getRowParams","selectionCandidates","rowIds","pagination","checkboxSelectionVisibleOnly","reduce","acc","currentSelectionSize","length","isIndeterminate","Object","keys","isChecked","handleChange","event","params","value","target","checked","publishEvent","headerSelectionCheckboxChange","tabIndex","field","useLayoutEffect","element","getColumnHeaderElement","handleKeyDown","useCallback","key","shiftKey","columnHeaderNavigationKeyDown","handleSelectionChange","p","useEffect","subscribeEvent","selectionChange","label","getLocaleText","components","BaseCheckbox","indeterminate","onChange","className","color","inputProps","onKeyDown","componentsProps","baseCheckbox","process","env","NODE_ENV","propTypes","colDef","object","isRequired","string"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"field\", \"colDef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { GridEvents } from '../../models/events';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridTabIndexColumnHeaderSelector } from '../../hooks/features/focus/gridFocusStateSelector';\nimport { gridSelectionStateSelector } from '../../hooks/features/selection/gridSelectionSelector';\nimport { isNavigationKey } from '../../utils/keyboardUtils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { gridVisibleSortedRowIdsSelector } from '../../hooks/features/filter/gridFilterSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../../hooks/features/pagination/gridPaginationSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['checkboxInput']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridHeaderCheckbox = /*#__PURE__*/React.forwardRef(function GridHeaderCheckbox(props, ref) {\n  var _rootProps$components;\n\n  const other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const [, forceUpdate] = React.useState(false);\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  const selection = useGridSelector(apiRef, gridSelectionStateSelector);\n  const visibleRowIds = useGridSelector(apiRef, gridVisibleSortedRowIdsSelector);\n  const paginatedVisibleRowIds = useGridSelector(apiRef, gridPaginatedVisibleSortedGridRowIdsSelector);\n  const filteredSelection = React.useMemo(() => {\n    if (typeof rootProps.isRowSelectable !== 'function') {\n      return selection;\n    }\n\n    return selection.filter(id => {\n      // The row might have been deleted\n      if (!apiRef.current.getRow(id)) {\n        return false;\n      }\n\n      return rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n    });\n  }, [apiRef, rootProps.isRowSelectable, selection]); // All the rows that could be selected / unselected by toggling this checkbox\n\n  const selectionCandidates = React.useMemo(() => {\n    const rowIds = !rootProps.pagination || !rootProps.checkboxSelectionVisibleOnly ? visibleRowIds : paginatedVisibleRowIds; // Convert to an object to make O(1) checking if a row exists or not\n    // TODO create selector that returns visibleRowIds/paginatedVisibleRowIds as an object\n\n    return rowIds.reduce((acc, id) => {\n      acc[id] = true;\n      return acc;\n    }, {});\n  }, [rootProps.pagination, rootProps.checkboxSelectionVisibleOnly, paginatedVisibleRowIds, visibleRowIds]); // Amount of rows selected and that are visible in the current page\n\n  const currentSelectionSize = React.useMemo(() => filteredSelection.filter(id => selectionCandidates[id]).length, [filteredSelection, selectionCandidates]);\n  const isIndeterminate = currentSelectionSize > 0 && currentSelectionSize < Object.keys(selectionCandidates).length;\n  const isChecked = currentSelectionSize > 0;\n\n  const handleChange = event => {\n    const params = {\n      value: event.target.checked\n    };\n    apiRef.current.publishEvent(GridEvents.headerSelectionCheckboxChange, params);\n  };\n\n  const tabIndex = tabIndexState !== null && tabIndexState.field === props.field ? 0 : -1;\n  React.useLayoutEffect(() => {\n    const element = apiRef.current.getColumnHeaderElement(props.field);\n\n    if (tabIndex === 0 && element) {\n      element.tabIndex = -1;\n    }\n  }, [tabIndex, apiRef, props.field]);\n  const handleKeyDown = React.useCallback(event => {\n    if (event.key === ' ') {\n      // imperative toggle the checkbox because Space is disable by some preventDefault\n      apiRef.current.publishEvent(GridEvents.headerSelectionCheckboxChange, {\n        value: !isChecked\n      });\n    } // TODO v6 remove columnHeaderNavigationKeyDown events which are not used internally anymore\n\n\n    if (isNavigationKey(event.key) && !event.shiftKey) {\n      apiRef.current.publishEvent(GridEvents.columnHeaderNavigationKeyDown, props, event);\n    }\n  }, [apiRef, props, isChecked]);\n  const handleSelectionChange = React.useCallback(() => {\n    forceUpdate(p => !p);\n  }, []);\n  React.useEffect(() => {\n    return apiRef.current.subscribeEvent(GridEvents.selectionChange, handleSelectionChange);\n  }, [apiRef, handleSelectionChange]);\n  const label = apiRef.current.getLocaleText(isChecked ? 'checkboxSelectionUnselectAllRows' : 'checkboxSelectionSelectAllRows');\n  return /*#__PURE__*/_jsx(rootProps.components.BaseCheckbox, _extends({\n    ref: ref,\n    indeterminate: isIndeterminate,\n    checked: isChecked,\n    onChange: handleChange,\n    className: classes.root,\n    color: \"primary\",\n    inputProps: {\n      'aria-label': label\n    },\n    tabIndex: tabIndex,\n    onKeyDown: handleKeyDown\n  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridHeaderCheckbox.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The column of the current header component.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the column that triggered the event\n   */\n  field: PropTypes.string.isRequired\n} : void 0;\nexport { GridHeaderCheckbox };"]},"metadata":{},"sourceType":"module"}