{"ast":null,"code":"import _slicedToArray from \"C:/pproject-files/new-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@mui/material/IconButton';\nimport MenuList from '@mui/material/MenuList';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { gridClasses } from '../../constants/gridClasses';\nimport { GridMenu } from '../menu/GridMenu';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar hasActions = function hasActions(colDef) {\n  return typeof colDef.getActions === 'function';\n};\n\nvar GridActionsCell = function GridActionsCell(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var buttonRef = React.useRef(null);\n  var touchRippleRefs = React.useRef({});\n  var menuId = useId();\n  var buttonId = useId();\n  var rootProps = useGridRootProps();\n  var colDef = props.colDef,\n      id = props.id,\n      api = props.api,\n      hasFocus = props.hasFocus,\n      _props$position = props.position,\n      position = _props$position === void 0 ? 'bottom-end' : _props$position; // TODO apply the rest to the root element\n\n  React.useLayoutEffect(function () {\n    if (!hasFocus) {\n      Object.entries(touchRippleRefs.current).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            index = _ref2[0],\n            ref = _ref2[1];\n\n        ref == null ? void 0 : ref.stop({}, function () {\n          delete touchRippleRefs.current[index];\n        });\n      });\n    }\n  }, [hasFocus]);\n\n  if (!hasActions(colDef)) {\n    throw new Error('MUI: Missing the `getActions` property in the `GridColDef`.');\n  }\n\n  var showMenu = function showMenu() {\n    return setOpen(true);\n  };\n\n  var hideMenu = function hideMenu() {\n    return setOpen(false);\n  };\n\n  var options = colDef.getActions(api.getRowParams(id));\n  var iconButtons = options.filter(function (option) {\n    return !option.props.showInMenu;\n  });\n  var menuButtons = options.filter(function (option) {\n    return option.props.showInMenu;\n  });\n\n  var handleTouchRippleRef = function handleTouchRippleRef(index) {\n    return function (instance) {\n      touchRippleRefs.current[index] = instance;\n    };\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: gridClasses.actionsCell,\n    children: [iconButtons.map(function (button, index) {\n      return /*#__PURE__*/React.cloneElement(button, {\n        key: index,\n        touchRippleRef: handleTouchRippleRef(index)\n      });\n    }), menuButtons.length > 0 && /*#__PURE__*/_jsx(IconButton, {\n      ref: buttonRef,\n      id: buttonId,\n      \"aria-label\": api.getLocaleText('actionsCellMore'),\n      \"aria-controls\": menuId,\n      \"aria-expanded\": open ? 'true' : undefined,\n      \"aria-haspopup\": \"true\",\n      size: \"small\",\n      onClick: showMenu,\n      children: /*#__PURE__*/_jsx(rootProps.components.MoreActionsIcon, {\n        fontSize: \"small\"\n      })\n    }), menuButtons.length > 0 && /*#__PURE__*/_jsx(GridMenu, {\n      id: menuId,\n      onClickAway: hideMenu,\n      onClick: hideMenu,\n      open: open,\n      target: buttonRef.current,\n      position: position,\n      \"aria-labelledby\": buttonId,\n      children: /*#__PURE__*/_jsx(MenuList, {\n        className: gridClasses.menuList,\n        children: menuButtons.map(function (button, index) {\n          return /*#__PURE__*/React.cloneElement(button, {\n            key: index\n          });\n        })\n      })\n    })]\n  });\n};\n\nprocess.env.NODE_ENV !== \"production\" ? GridActionsCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  position: PropTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top'])\n} : void 0;\nexport { GridActionsCell };\nexport var renderActionsCell = function renderActionsCell(params) {\n  return /*#__PURE__*/_jsx(GridActionsCell, _extends({}, params));\n};","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/components/cell/GridActionsCell.js"],"names":["_extends","React","PropTypes","IconButton","MenuList","unstable_useId","useId","gridClasses","GridMenu","useGridRootProps","jsx","_jsx","jsxs","_jsxs","hasActions","colDef","getActions","GridActionsCell","props","useState","open","setOpen","buttonRef","useRef","touchRippleRefs","menuId","buttonId","rootProps","id","api","hasFocus","position","useLayoutEffect","Object","entries","current","forEach","index","ref","stop","Error","showMenu","hideMenu","options","getRowParams","iconButtons","filter","option","showInMenu","menuButtons","handleTouchRippleRef","instance","className","actionsCell","children","map","button","cloneElement","key","touchRippleRef","length","getLocaleText","undefined","size","onClick","components","MoreActionsIcon","fontSize","onClickAway","target","menuList","process","env","NODE_ENV","propTypes","any","isRequired","object","bool","oneOfType","number","string","oneOf","renderActionsCell","params"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@mui/material/IconButton';\nimport MenuList from '@mui/material/MenuList';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { gridClasses } from '../../constants/gridClasses';\nimport { GridMenu } from '../menu/GridMenu';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst hasActions = colDef => typeof colDef.getActions === 'function';\n\nconst GridActionsCell = props => {\n  const [open, setOpen] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const touchRippleRefs = React.useRef({});\n  const menuId = useId();\n  const buttonId = useId();\n  const rootProps = useGridRootProps();\n  const {\n    colDef,\n    id,\n    api,\n    hasFocus,\n    position = 'bottom-end'\n  } = props; // TODO apply the rest to the root element\n\n  React.useLayoutEffect(() => {\n    if (!hasFocus) {\n      Object.entries(touchRippleRefs.current).forEach(([index, ref]) => {\n        ref == null ? void 0 : ref.stop({}, () => {\n          delete touchRippleRefs.current[index];\n        });\n      });\n    }\n  }, [hasFocus]);\n\n  if (!hasActions(colDef)) {\n    throw new Error('MUI: Missing the `getActions` property in the `GridColDef`.');\n  }\n\n  const showMenu = () => setOpen(true);\n\n  const hideMenu = () => setOpen(false);\n\n  const options = colDef.getActions(api.getRowParams(id));\n  const iconButtons = options.filter(option => !option.props.showInMenu);\n  const menuButtons = options.filter(option => option.props.showInMenu);\n\n  const handleTouchRippleRef = index => instance => {\n    touchRippleRefs.current[index] = instance;\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: gridClasses.actionsCell,\n    children: [iconButtons.map((button, index) => /*#__PURE__*/React.cloneElement(button, {\n      key: index,\n      touchRippleRef: handleTouchRippleRef(index)\n    })), menuButtons.length > 0 && /*#__PURE__*/_jsx(IconButton, {\n      ref: buttonRef,\n      id: buttonId,\n      \"aria-label\": api.getLocaleText('actionsCellMore'),\n      \"aria-controls\": menuId,\n      \"aria-expanded\": open ? 'true' : undefined,\n      \"aria-haspopup\": \"true\",\n      size: \"small\",\n      onClick: showMenu,\n      children: /*#__PURE__*/_jsx(rootProps.components.MoreActionsIcon, {\n        fontSize: \"small\"\n      })\n    }), menuButtons.length > 0 && /*#__PURE__*/_jsx(GridMenu, {\n      id: menuId,\n      onClickAway: hideMenu,\n      onClick: hideMenu,\n      open: open,\n      target: buttonRef.current,\n      position: position,\n      \"aria-labelledby\": buttonId,\n      children: /*#__PURE__*/_jsx(MenuList, {\n        className: gridClasses.menuList,\n        children: menuButtons.map((button, index) => /*#__PURE__*/React.cloneElement(button, {\n          key: index\n        }))\n      })\n    })]\n  });\n};\n\nprocess.env.NODE_ENV !== \"production\" ? GridActionsCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  position: PropTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top'])\n} : void 0;\nexport { GridActionsCell };\nexport const renderActionsCell = params => /*#__PURE__*/_jsx(GridActionsCell, _extends({}, params));"]},"metadata":{},"sourceType":"module"}