{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nexport var focusStateInitializer = function focusStateInitializer(state) {\n  return _extends({}, state, {\n    focus: {\n      cell: null,\n      columnHeader: null\n    },\n    tabIndex: {\n      cell: null,\n      columnHeader: null\n    }\n  });\n};\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport var useGridFocus = function useGridFocus(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useGridFocus');\n  var lastClickedCell = React.useRef(null);\n  var setCellFocus = React.useCallback(function (id, field) {\n    // The row might have been deleted\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    var focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && focusedCell.field === field) {\n      return;\n    }\n\n    apiRef.current.setState(function (state) {\n      logger.debug(\"Focusing on cell with id=\".concat(id, \" and field=\").concat(field));\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id: id,\n            field: field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id: id,\n            field: field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent(GridEvents.cellFocusIn, apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  var setColumnHeaderFocus = React.useCallback(function (field) {\n    var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      apiRef.current.publishEvent(GridEvents.cellFocusOut, apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n\n    apiRef.current.setState(function (state) {\n      logger.debug(\"Focusing on column header with colIndex=\".concat(field));\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field: field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field: field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  var handleCellDoubleClick = React.useCallback(function (_ref) {\n    var id = _ref.id,\n        field = _ref.field;\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  var handleCellKeyDown = React.useCallback(function (params, event) {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  var handleColumnHeaderFocus = React.useCallback(function (_ref2, event) {\n    var field = _ref2.field;\n\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  var handleBlur = React.useCallback(function () {\n    logger.debug(\"Clearing focus\");\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      });\n    });\n  }, [logger, apiRef]);\n  var handleCellMouseUp = React.useCallback(function (params) {\n    lastClickedCell.current = params;\n  }, []);\n  var handleDocumentClick = React.useCallback(function (event) {\n    var cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    var focusedCell = gridFocusCellSelector(apiRef);\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    var cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    } // The row might have been deleted during the click\n\n\n    if (!apiRef.current.getRow(focusedCell.id)) {\n      return;\n    } // There's a focused cell but another cell was clicked\n    // Publishes an event to notify that the focus was lost\n\n\n    apiRef.current.publishEvent(GridEvents.cellFocusOut, apiRef.current.getCellParams(focusedCell.id, focusedCell.field), event);\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(function (state) {\n        return _extends({}, state, {\n          focus: {\n            cell: null,\n            columnHeader: null\n          }\n        });\n      });\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  var handleCellModeChange = React.useCallback(function (params) {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    var cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus: setCellFocus,\n    setColumnHeaderFocus: setColumnHeaderFocus\n  }, 'GridFocusApi');\n  React.useEffect(function () {\n    var cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      var updatedRow = apiRef.current.getRow(cell.id);\n\n      if (!updatedRow) {\n        apiRef.current.setState(function (state) {\n          return _extends({}, state, {\n            focus: {\n              cell: null,\n              columnHeader: null\n            }\n          });\n        });\n      }\n    }\n  }, [apiRef, props.rows]);\n  React.useEffect(function () {\n    var doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return function () {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderBlur, handleBlur);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, GridEvents.cellMouseUp, handleCellMouseUp);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.cellModeChange, handleCellModeChange);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderFocus, handleColumnHeaderFocus);\n};","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js"],"names":["_extends","React","ownerDocument","GridEvents","useGridApiMethod","useGridLogger","useGridApiEventHandler","isNavigationKey","gridFocusCellSelector","focusStateInitializer","state","focus","cell","columnHeader","tabIndex","useGridFocus","apiRef","props","logger","lastClickedCell","useRef","setCellFocus","useCallback","id","field","current","getRow","focusedCell","setState","debug","forceUpdate","publishEvent","cellFocusIn","getCellParams","setColumnHeaderFocus","event","cellFocusOut","handleCellDoubleClick","handleCellKeyDown","params","key","handleColumnHeaderFocus","target","currentTarget","handleBlur","handleCellMouseUp","handleDocumentClick","cellParams","cellElement","getCellElement","contains","handleCellModeChange","cellMode","useEffect","updatedRow","rows","doc","rootElementRef","addEventListener","removeEventListener","columnHeaderBlur","cellDoubleClick","cellMouseUp","cellKeyDown","cellModeChange","columnHeaderFocus"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const setCellFocus = React.useCallback((id, field) => {\n    // The row might have been deleted\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && focusedCell.field === field) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent(GridEvents.cellFocusIn, apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      apiRef.current.publishEvent(GridEvents.cellFocusOut, apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseUp = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    } // The row might have been deleted during the click\n\n\n    if (!apiRef.current.getRow(focusedCell.id)) {\n      return;\n    } // There's a focused cell but another cell was clicked\n    // Publishes an event to notify that the focus was lost\n\n\n    apiRef.current.publishEvent(GridEvents.cellFocusOut, apiRef.current.getCellParams(focusedCell.id, focusedCell.field), event);\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    const cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus,\n    setColumnHeaderFocus\n  }, 'GridFocusApi');\n  React.useEffect(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      const updatedRow = apiRef.current.getRow(cell.id);\n\n      if (!updatedRow) {\n        apiRef.current.setState(state => _extends({}, state, {\n          focus: {\n            cell: null,\n            columnHeader: null\n          }\n        }));\n      }\n    }\n  }, [apiRef, props.rows]);\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderBlur, handleBlur);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, GridEvents.cellMouseUp, handleCellMouseUp);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.cellModeChange, handleCellModeChange);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderFocus, handleColumnHeaderFocus);\n};"]},"metadata":{},"sourceType":"module"}