{"ast":null,"code":"import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from '../../../utils/domUtils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { buildWarning } from '../../../utils/warning';\nvar warnedOnceMissingColumn = false;\n\nfunction warnMissingColumn(field) {\n  console.warn([\"MUI: You are calling getValue('\".concat(field, \"') but the column `\").concat(field, \"` is not defined.\"), \"Instead, you can access the data from `params.row.\".concat(field, \"`.\")].join('\\n'));\n  warnedOnceMissingColumn = true;\n}\n\nvar getCellValueWarning = buildWarning([\"MUI: You are calling getValue. This method is deprecated and will be removed in the next major version.\", 'Instead, you can access the data from `params.row`.']);\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\n\nexport function useGridParamsApi(apiRef) {\n  var getColumnHeaderParams = React.useCallback(function (field) {\n    return {\n      field: field,\n      colDef: apiRef.current.getColumn(field)\n    };\n  }, [apiRef]);\n  /**\n   * We want to remove the `getValue` param from `getRowParams`, `getCellParams` and `getBaseCellParams`\n   */\n\n  var getCellValueWithDeprecationWarning = React.useCallback(function () {\n    var _apiRef$current;\n\n    if (process.env.NODE_ENV !== 'production') {\n      getCellValueWarning();\n    }\n\n    return (_apiRef$current = apiRef.current).getCellValue.apply(_apiRef$current, arguments);\n  }, [apiRef]);\n  var getRowParams = React.useCallback(function (id) {\n    var row = apiRef.current.getRow(id);\n\n    if (!row) {\n      throw new Error(\"No row with id #\".concat(id, \" found\"));\n    }\n\n    var params = {\n      id: id,\n      columns: apiRef.current.getAllColumns(),\n      row: row,\n      // TODO v6: remove\n      getValue: getCellValueWithDeprecationWarning\n    };\n    return params;\n  }, [apiRef, getCellValueWithDeprecationWarning]);\n  var getBaseCellParams = React.useCallback(function (id, field) {\n    var row = apiRef.current.getRow(id);\n    var rowNode = apiRef.current.getRowNode(id);\n\n    if (!row || !rowNode) {\n      throw new Error(\"No row with id #\".concat(id, \" found\"));\n    }\n\n    var cellFocus = gridFocusCellSelector(apiRef);\n    var cellTabIndex = gridTabIndexCellSelector(apiRef);\n    var params = {\n      id: id,\n      field: field,\n      row: row,\n      rowNode: rowNode,\n      value: row[field],\n      colDef: apiRef.current.getColumn(field),\n      cellMode: apiRef.current.getCellMode(id, field),\n      // TODO v6: remove\n      getValue: getCellValueWithDeprecationWarning,\n      api: apiRef.current,\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1\n    };\n    return params;\n  }, [apiRef, getCellValueWithDeprecationWarning]);\n  var getCellParams = React.useCallback(function (id, field) {\n    var colDef = apiRef.current.getColumn(field);\n    var value = apiRef.current.getCellValue(id, field);\n    var row = apiRef.current.getRow(id);\n    var rowNode = apiRef.current.getRowNode(id);\n\n    if (!row || !rowNode) {\n      throw new Error(\"No row with id #\".concat(id, \" found\"));\n    }\n\n    var cellFocus = gridFocusCellSelector(apiRef);\n    var cellTabIndex = gridTabIndexCellSelector(apiRef);\n    var params = {\n      id: id,\n      field: field,\n      row: row,\n      rowNode: rowNode,\n      colDef: colDef,\n      cellMode: apiRef.current.getCellMode(id, field),\n      // TODO v6: remove\n      getValue: getCellValueWithDeprecationWarning,\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      value: value,\n      formattedValue: value\n    };\n\n    if (colDef.valueFormatter) {\n      params.formattedValue = colDef.valueFormatter({\n        id: id,\n        field: params.field,\n        value: params.value,\n        api: apiRef.current\n      });\n    }\n\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef, getCellValueWithDeprecationWarning]);\n  var getCellValue = React.useCallback(function (id, field) {\n    var colDef = apiRef.current.getColumn(field);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!colDef && !warnedOnceMissingColumn) {\n        warnMissingColumn(field);\n      }\n    }\n\n    if (!colDef || !colDef.valueGetter) {\n      var rowModel = apiRef.current.getRow(id);\n\n      if (!rowModel) {\n        throw new Error(\"No row with id #\".concat(id, \" found\"));\n      }\n\n      return rowModel[field];\n    }\n\n    return colDef.valueGetter(getBaseCellParams(id, field));\n  }, [apiRef, getBaseCellParams]);\n  var getColumnHeaderElement = React.useCallback(function (field) {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  var getRowElement = React.useCallback(function (id) {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  var getCellElement = React.useCallback(function (id, field) {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id: id,\n      field: field\n    });\n  }, [apiRef]);\n  var paramsApi = {\n    getCellValue: getCellValue,\n    getCellParams: getCellParams,\n    getCellElement: getCellElement,\n    getRowParams: getRowParams,\n    getRowElement: getRowElement,\n    getColumnHeaderParams: getColumnHeaderParams,\n    getColumnHeaderElement: getColumnHeaderElement\n  };\n  useGridApiMethod(apiRef, paramsApi, 'GridParamsApi');\n}","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.js"],"names":["React","getGridCellElement","getGridColumnHeaderElement","getGridRowElement","useGridApiMethod","gridFocusCellSelector","gridTabIndexCellSelector","buildWarning","warnedOnceMissingColumn","warnMissingColumn","field","console","warn","join","getCellValueWarning","useGridParamsApi","apiRef","getColumnHeaderParams","useCallback","colDef","current","getColumn","getCellValueWithDeprecationWarning","process","env","NODE_ENV","getCellValue","getRowParams","id","row","getRow","Error","params","columns","getAllColumns","getValue","getBaseCellParams","rowNode","getRowNode","cellFocus","cellTabIndex","value","cellMode","getCellMode","api","hasFocus","tabIndex","getCellParams","formattedValue","valueFormatter","isEditable","isCellEditable","valueGetter","rowModel","getColumnHeaderElement","rootElementRef","getRowElement","getCellElement","paramsApi"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from '../../../utils/domUtils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { buildWarning } from '../../../utils/warning';\nlet warnedOnceMissingColumn = false;\n\nfunction warnMissingColumn(field) {\n  console.warn([`MUI: You are calling getValue('${field}') but the column \\`${field}\\` is not defined.`, `Instead, you can access the data from \\`params.row.${field}\\`.`].join('\\n'));\n  warnedOnceMissingColumn = true;\n}\n\nconst getCellValueWarning = buildWarning([`MUI: You are calling getValue. This method is deprecated and will be removed in the next major version.`, 'Instead, you can access the data from `params.row`.']);\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\n\nexport function useGridParamsApi(apiRef) {\n  const getColumnHeaderParams = React.useCallback(field => ({\n    field,\n    colDef: apiRef.current.getColumn(field)\n  }), [apiRef]);\n  /**\n   * We want to remove the `getValue` param from `getRowParams`, `getCellParams` and `getBaseCellParams`\n   */\n\n  const getCellValueWithDeprecationWarning = React.useCallback((...args) => {\n    if (process.env.NODE_ENV !== 'production') {\n      getCellValueWarning();\n    }\n\n    return apiRef.current.getCellValue(...args);\n  }, [apiRef]);\n  const getRowParams = React.useCallback(id => {\n    const row = apiRef.current.getRow(id);\n\n    if (!row) {\n      throw new Error(`No row with id #${id} found`);\n    }\n\n    const params = {\n      id,\n      columns: apiRef.current.getAllColumns(),\n      row,\n      // TODO v6: remove\n      getValue: getCellValueWithDeprecationWarning\n    };\n    return params;\n  }, [apiRef, getCellValueWithDeprecationWarning]);\n  const getBaseCellParams = React.useCallback((id, field) => {\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if (!row || !rowNode) {\n      throw new Error(`No row with id #${id} found`);\n    }\n\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      value: row[field],\n      colDef: apiRef.current.getColumn(field),\n      cellMode: apiRef.current.getCellMode(id, field),\n      // TODO v6: remove\n      getValue: getCellValueWithDeprecationWarning,\n      api: apiRef.current,\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1\n    };\n    return params;\n  }, [apiRef, getCellValueWithDeprecationWarning]);\n  const getCellParams = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const value = apiRef.current.getCellValue(id, field);\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if (!row || !rowNode) {\n      throw new Error(`No row with id #${id} found`);\n    }\n\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      colDef,\n      cellMode: apiRef.current.getCellMode(id, field),\n      // TODO v6: remove\n      getValue: getCellValueWithDeprecationWarning,\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      value,\n      formattedValue: value\n    };\n\n    if (colDef.valueFormatter) {\n      params.formattedValue = colDef.valueFormatter({\n        id,\n        field: params.field,\n        value: params.value,\n        api: apiRef.current\n      });\n    }\n\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef, getCellValueWithDeprecationWarning]);\n  const getCellValue = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!colDef && !warnedOnceMissingColumn) {\n        warnMissingColumn(field);\n      }\n    }\n\n    if (!colDef || !colDef.valueGetter) {\n      const rowModel = apiRef.current.getRow(id);\n\n      if (!rowModel) {\n        throw new Error(`No row with id #${id} found`);\n      }\n\n      return rowModel[field];\n    }\n\n    return colDef.valueGetter(getBaseCellParams(id, field));\n  }, [apiRef, getBaseCellParams]);\n  const getColumnHeaderElement = React.useCallback(field => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  const getRowElement = React.useCallback(id => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  const getCellElement = React.useCallback((id, field) => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id,\n      field\n    });\n  }, [apiRef]);\n  const paramsApi = {\n    getCellValue,\n    getCellParams,\n    getCellElement,\n    getRowParams,\n    getRowElement,\n    getColumnHeaderParams,\n    getColumnHeaderElement\n  };\n  useGridApiMethod(apiRef, paramsApi, 'GridParamsApi');\n}"]},"metadata":{},"sourceType":"module"}