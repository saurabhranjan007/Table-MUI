{"ast":null,"code":"import _slicedToArray from \"C:/pproject-files/new-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"style\"];\nimport * as React from 'react';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\"; // Uses binary search to avoid looping through all possible positions\n\nexport function getIndexFromScroll(offset, positions) {\n  var sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  var pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  var itemOffset = positions[pivot];\n  return offset <= itemOffset ? getIndexFromScroll(offset, positions, sliceStart, pivot) : getIndexFromScroll(offset, positions, pivot + 1, sliceEnd);\n}\nexport var useGridVirtualScroller = function useGridVirtualScroller(props) {\n  var _currentPage$range2;\n\n  var apiRef = useGridApiContext();\n  var rootProps = useGridRootProps();\n  var visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  var ref = props.ref,\n      disableVirtualization = props.disableVirtualization,\n      onRenderZonePositioning = props.onRenderZonePositioning,\n      _props$renderZoneMinC = props.renderZoneMinColumnIndex,\n      renderZoneMinColumnIndex = _props$renderZoneMinC === void 0 ? 0 : _props$renderZoneMinC,\n      _props$renderZoneMaxC = props.renderZoneMaxColumnIndex,\n      renderZoneMaxColumnIndex = _props$renderZoneMaxC === void 0 ? visibleColumns.length : _props$renderZoneMaxC,\n      getRowProps = props.getRowProps;\n  var columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  var columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  var rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  var cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  var cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  var rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  var editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  var selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  var currentPage = useGridVisibleRows(apiRef, rootProps);\n  var renderZoneRef = React.useRef(null);\n  var rootRef = React.useRef(null);\n  var handleRef = useForkRef(ref, rootRef);\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      renderContext = _React$useState2[0],\n      setRenderContext = _React$useState2[1];\n\n  var prevRenderContext = React.useRef(renderContext);\n  var scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      containerWidth = _React$useState4[0],\n      setContainerWidth = _React$useState4[1];\n\n  var prevTotalWidth = React.useRef(columnsTotalWidth);\n  var computeRenderContext = React.useCallback(function () {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    var _scrollPosition$curre = scrollPosition.current,\n        top = _scrollPosition$curre.top,\n        left = _scrollPosition$curre.left;\n    var firstRowIndex = getIndexFromScroll(top, rowsMeta.positions);\n    var lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getIndexFromScroll(top + rootRef.current.clientHeight, rowsMeta.positions);\n    var firstColumnIndex = getIndexFromScroll(left, columnPositions);\n    var lastColumnIndex = getIndexFromScroll(left + containerWidth, columnPositions);\n    return {\n      firstRowIndex: firstRowIndex,\n      lastRowIndex: lastRowIndex,\n      firstColumnIndex: firstColumnIndex,\n      lastColumnIndex: lastColumnIndex\n    };\n  }, [disableVirtualization, rowsMeta.positions, rootProps.autoHeight, currentPage.rows.length, columnPositions, containerWidth, visibleColumns.length]);\n  React.useEffect(function () {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = \"translate3d(0px, 0px, 0px)\";\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  React.useEffect(function () {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  var handleResize = React.useCallback(function () {\n    if (rootRef.current) {\n      setContainerWidth(rootRef.current.clientWidth);\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, GridEvents.resize, handleResize);\n\n  var getRenderableIndexes = function getRenderableIndexes(_ref2) {\n    var firstIndex = _ref2.firstIndex,\n        lastIndex = _ref2.lastIndex,\n        buffer = _ref2.buffer,\n        minFirstIndex = _ref2.minFirstIndex,\n        maxLastIndex = _ref2.maxLastIndex;\n    return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n  };\n\n  var updateRenderZonePosition = React.useCallback(function (nextRenderContext) {\n    var _currentPage$range;\n\n    var _getRenderableIndexes = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: ((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.lastRowIndex) || 0,\n      buffer: rootProps.rowBuffer\n    }),\n        _getRenderableIndexes2 = _slicedToArray(_getRenderableIndexes, 1),\n        firstRowToRender = _getRenderableIndexes2[0];\n\n    var _getRenderableIndexes3 = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    }),\n        _getRenderableIndexes4 = _slicedToArray(_getRenderableIndexes3, 1),\n        firstColumnToRender = _getRenderableIndexes4[0];\n\n    var top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    var left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = \"translate3d(\".concat(left, \"px, \").concat(top, \"px, 0px)\");\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top: top,\n        left: left\n      });\n    }\n  }, [apiRef, (_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.lastRowIndex, onRenderZonePositioning, renderZoneMaxColumnIndex, renderZoneMinColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  var updateRenderContext = React.useCallback(function (nextRenderContext) {\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    prevRenderContext.current = nextRenderContext;\n  }, [setRenderContext, prevRenderContext, updateRenderZonePosition]);\n  React.useEffect(function () {\n    if (containerWidth == null) {\n      return;\n    }\n\n    var initialRenderContext = computeRenderContext();\n    prevRenderContext.current = initialRenderContext;\n    updateRenderContext(initialRenderContext);\n    var _scrollPosition$curre2 = scrollPosition.current,\n        top = _scrollPosition$curre2.top,\n        left = _scrollPosition$curre2.left;\n    var params = {\n      top: top,\n      left: left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent(GridEvents.rowsScroll, params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  var handleScroll = function handleScroll(event) {\n    var _event$currentTarget = event.currentTarget,\n        scrollTop = _event$currentTarget.scrollTop,\n        scrollLeft = _event$currentTarget.scrollLeft;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    var nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    var rowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    var columnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    var shouldSetState = rowsScrolledSincePreviousRender >= rootProps.rowThreshold || columnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent(GridEvents.rowsScroll, {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    });\n\n    if (shouldSetState) {\n      updateRenderContext(nextRenderContext);\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  var getRows = function getRows() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext: renderContext\n    };\n    var nextRenderContext = params.renderContext,\n        _params$minFirstColum = params.minFirstColumn,\n        minFirstColumn = _params$minFirstColum === void 0 ? renderZoneMinColumnIndex : _params$minFirstColum,\n        _params$maxLastColumn = params.maxLastColumn,\n        maxLastColumn = _params$maxLastColumn === void 0 ? renderZoneMaxColumnIndex : _params$maxLastColumn,\n        _params$availableSpac = params.availableSpace,\n        availableSpace = _params$availableSpac === void 0 ? containerWidth : _params$availableSpac;\n\n    if (!currentPage.range || !nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    var rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    var columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n\n    var _getRenderableIndexes5 = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    }),\n        _getRenderableIndexes6 = _slicedToArray(_getRenderableIndexes5, 2),\n        firstRowToRender = _getRenderableIndexes6[0],\n        lastRowToRender = _getRenderableIndexes6[1];\n\n    var _getRenderableIndexes7 = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    }),\n        _getRenderableIndexes8 = _slicedToArray(_getRenderableIndexes7, 2),\n        firstColumnToRender = _getRenderableIndexes8[0],\n        lastColumnToRender = _getRenderableIndexes8[1];\n\n    var renderedRows = currentPage.rows.slice(firstRowToRender, lastRowToRender);\n    var renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    var rows = [];\n\n    for (var i = 0; i < renderedRows.length; i += 1) {\n      var _rootProps$components;\n\n      var _renderedRows$i = renderedRows[i],\n          id = _renderedRows$i.id,\n          model = _renderedRows$i.model;\n      var lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      var targetRowHeight = apiRef.current.unstable_getRowHeight(id);\n      var isSelected = void 0;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else if (typeof rootProps.isRowSelectable === 'function') {\n        isSelected = rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n      } else {\n        isSelected = true;\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: targetRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: currentPage.range.firstRowIndex + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  var needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  var contentSize = React.useMemo(function () {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    var height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    var shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    var size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height: height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(function () {\n    apiRef.current.publishEvent(GridEvents.virtualScrollerContentSizeChange);\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  var rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  var getRenderContext = React.useCallback(function () {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext: renderContext,\n    updateRenderZonePosition: updateRenderZonePosition,\n    getRows: getRows,\n    getRootProps: function getRootProps() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _ref$style = _ref.style,\n          style = _ref$style === void 0 ? {} : _ref$style,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: function getContentProps() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$style = _ref3.style,\n          style = _ref3$style === void 0 ? {} : _ref3$style;\n\n      return {\n        style: _extends({}, style, contentSize)\n      };\n    },\n    getRenderZoneProps: function getRenderZoneProps() {\n      return {\n        ref: renderZoneRef\n      };\n    }\n  };\n};","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","useForkRef","useGridApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridDensityRowHeightSelector","gridFocusCellSelector","gridTabIndexCellSelector","gridEditRowsStateSelector","useGridVisibleRows","GridEvents","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","jsx","_jsx","getIndexFromScroll","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","useGridVirtualScroller","props","_currentPage$range2","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","columnPositions","columnsTotalWidth","rowHeight","cellFocus","cellTabIndex","rowsMeta","editRowsState","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","useState","renderContext","setRenderContext","prevRenderContext","scrollPosition","top","left","containerWidth","setContainerWidth","prevTotalWidth","computeRenderContext","useCallback","firstRowIndex","lastRowIndex","rows","firstColumnIndex","lastColumnIndex","current","autoHeight","clientHeight","useEffect","style","transform","scrollLeft","scrollTop","clientWidth","currentPageTotalHeight","handleResize","resize","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","updateRenderZonePosition","nextRenderContext","_currentPage$range","range","rowBuffer","firstRowToRender","columnBuffer","firstColumnToRender","state","updateRenderContext","initialRenderContext","params","publishEvent","rowsScroll","handleScroll","event","currentTarget","rowsScrolledSincePreviousRender","abs","columnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","getRows","minFirstColumn","maxLastColumn","availableSpace","lastRowToRender","lastColumnToRender","renderedRows","slice","renderedColumns","i","_rootProps$components","id","model","lastVisibleRowIndex","targetRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","getRowParams","push","components","Row","row","rowId","selected","index","isLastVisible","componentsProps","needsHorizontalScrollbar","contentSize","useMemo","height","max","shouldExtendContent","size","width","minHeight","virtualScrollerContentSizeChange","rootStyle","overflowX","getRenderContext","unstable_getRenderContext","getRootProps","_ref","other","onScroll","getContentProps","getRenderZoneProps"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Uses binary search to avoid looping through all possible positions\nexport function getIndexFromScroll(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? getIndexFromScroll(offset, positions, sliceStart, pivot) : getIndexFromScroll(offset, positions, pivot + 1, sliceEnd);\n}\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range2;\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerWidth, setContainerWidth] = React.useState(null);\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const firstRowIndex = getIndexFromScroll(top, rowsMeta.positions);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getIndexFromScroll(top + rootRef.current.clientHeight, rowsMeta.positions);\n    const firstColumnIndex = getIndexFromScroll(left, columnPositions);\n    const lastColumnIndex = getIndexFromScroll(left + containerWidth, columnPositions);\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, rowsMeta.positions, rootProps.autoHeight, currentPage.rows.length, columnPositions, containerWidth, visibleColumns.length]);\n  React.useEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  React.useEffect(() => {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerWidth(rootRef.current.clientWidth);\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, GridEvents.resize, handleResize);\n\n  const getRenderableIndexes = ({\n    firstIndex,\n    lastIndex,\n    buffer,\n    minFirstIndex,\n    maxLastIndex\n  }) => {\n    return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n  };\n\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    var _currentPage$range;\n\n    const [firstRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: ((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.lastRowIndex) || 0,\n      buffer: rootProps.rowBuffer\n    });\n    const [firstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, (_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.lastRowIndex, onRenderZonePositioning, renderZoneMaxColumnIndex, renderZoneMinColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    prevRenderContext.current = nextRenderContext;\n  }, [setRenderContext, prevRenderContext, updateRenderZonePosition]);\n  React.useEffect(() => {\n    if (containerWidth == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    prevRenderContext.current = initialRenderContext;\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent(GridEvents.rowsScroll, params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const rowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const columnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const shouldSetState = rowsScrolledSincePreviousRender >= rootProps.rowThreshold || columnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent(GridEvents.rowsScroll, {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    });\n\n    if (shouldSetState) {\n      updateRenderContext(nextRenderContext);\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const getRows = (params = {\n    renderContext\n  }) => {\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerWidth\n    } = params;\n\n    if (!currentPage.range || !nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const [firstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const renderedRows = currentPage.rows.slice(firstRowToRender, lastRowToRender);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const targetRowHeight = apiRef.current.unstable_getRowHeight(id);\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else if (typeof rootProps.isRowSelectable === 'function') {\n        isSelected = rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n      } else {\n        isSelected = true;\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: targetRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: currentPage.range.firstRowIndex + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent(GridEvents.virtualScrollerContentSizeChange);\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref = {}) => {\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"]},"metadata":{},"sourceType":"module"}