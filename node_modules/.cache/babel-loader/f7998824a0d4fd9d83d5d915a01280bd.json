{"ast":null,"code":"import _toConsumableArray from \"C:/pproject-files/new-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport Chip from '@mui/material/Chip';\nimport TextField from '@mui/material/TextField';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { getValueFromOption } from './filterPanelUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar isOptionEqualToValue = function isOptionEqualToValue(option, value) {\n  return getValueFromOption(option) === getValueFromOption(value);\n};\n\nvar filter = createFilterOptions();\n\nfunction GridFilterInputMultipleSingleSelect(props) {\n  var item = props.item,\n      applyValue = props.applyValue,\n      apiRef = props.apiRef,\n      focusElementRef = props.focusElementRef,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var id = useId();\n  var resolvedColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;\n  var resolvedValueOptions = React.useMemo(function () {\n    return typeof (resolvedColumn == null ? void 0 : resolvedColumn.valueOptions) === 'function' ? resolvedColumn.valueOptions({\n      field: resolvedColumn.field\n    }) : resolvedColumn == null ? void 0 : resolvedColumn.valueOptions;\n  }, [resolvedColumn]);\n  var resolvedFormattedValueOptions = React.useMemo(function () {\n    return resolvedValueOptions == null ? void 0 : resolvedValueOptions.map(getValueFromOption);\n  }, [resolvedValueOptions]);\n\n  var _apiRef$current$getCo = apiRef.current.getColumn(item.columnField),\n      valueFormatter = _apiRef$current$getCo.valueFormatter,\n      field = _apiRef$current$getCo.field;\n\n  var filterValueOptionFormatter = function filterValueOptionFormatter(option) {\n    if (typeof option === 'object') {\n      return option.label;\n    }\n\n    return valueFormatter && option !== '' ? valueFormatter({\n      value: option,\n      field: field,\n      api: apiRef.current\n    }) : option;\n  }; // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useState, the Autocomplete could receive incoherent value and options\n\n\n  var filterValues = React.useMemo(function () {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n\n    if (resolvedValueOptions !== undefined) {\n      var itemValueIndexes = item.value.map(function (element) {\n        // get the index matching between values and valueoptions\n        var formattedElement = getValueFromOption(element);\n        var index = (resolvedFormattedValueOptions == null ? void 0 : resolvedFormattedValueOptions.findIndex(function (formatedOption) {\n          return formatedOption === formattedElement;\n        })) || 0;\n        return index;\n      });\n      return itemValueIndexes.filter(function (index) {\n        return index >= 0;\n      }).map(function (index) {\n        return resolvedValueOptions[index];\n      });\n    }\n\n    return item.value;\n  }, [item.value, resolvedValueOptions, resolvedFormattedValueOptions]);\n  React.useEffect(function () {\n    if (!Array.isArray(item.value) || filterValues.length !== item.value.length) {\n      // update the state if the filter value has been cleaned by the component\n      applyValue(_extends({}, item, {\n        value: filterValues.map(getValueFromOption)\n      }));\n    }\n  }, [item, filterValues, applyValue]);\n  var handleChange = React.useCallback(function (event, value) {\n    applyValue(_extends({}, item, {\n      value: _toConsumableArray(value.map(getValueFromOption))\n    }));\n  }, [applyValue, item]);\n  return /*#__PURE__*/_jsx(Autocomplete, _extends({\n    multiple: true,\n    freeSolo: false,\n    limitTags: 1,\n    options: resolvedValueOptions // TODO: avoid `any`?\n    ,\n    isOptionEqualToValue: isOptionEqualToValue,\n    filterOptions: filter,\n    id: id,\n    value: filterValues,\n    onChange: handleChange,\n    renderTags: function renderTags(value, getTagProps) {\n      return value.map(function (option, index) {\n        return /*#__PURE__*/_jsx(Chip, _extends({\n          variant: \"outlined\",\n          size: \"small\",\n          label: filterValueOptionFormatter(option)\n        }, getTagProps({\n          index: index\n        })));\n      });\n    },\n    renderInput: function renderInput(params) {\n      return /*#__PURE__*/_jsx(TextField, _extends({}, params, {\n        label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n        placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n        InputLabelProps: _extends({}, params.InputLabelProps, {\n          shrink: true\n        }),\n        inputRef: focusElementRef,\n        type: 'singleSelect',\n        variant: \"standard\"\n      }));\n    }\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.func, PropTypes.object]),\n  item: PropTypes.shape({\n    columnField: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operatorValue: PropTypes.string,\n    value: PropTypes.any\n  }).isRequired,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };","map":{"version":3,"sources":["C:/pproject-files/new-app/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleSingleSelect.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","Autocomplete","createFilterOptions","Chip","TextField","unstable_useId","useId","getValueFromOption","jsx","_jsx","isOptionEqualToValue","option","value","filter","GridFilterInputMultipleSingleSelect","props","item","applyValue","apiRef","focusElementRef","other","id","resolvedColumn","columnField","current","getColumn","resolvedValueOptions","useMemo","valueOptions","field","resolvedFormattedValueOptions","map","valueFormatter","filterValueOptionFormatter","label","api","filterValues","Array","isArray","undefined","itemValueIndexes","element","formattedElement","index","findIndex","formatedOption","useEffect","length","handleChange","useCallback","event","multiple","freeSolo","limitTags","options","filterOptions","onChange","renderTags","getTagProps","variant","size","renderInput","params","getLocaleText","placeholder","InputLabelProps","shrink","inputRef","type","process","env","NODE_ENV","propTypes","shape","object","isRequired","func","oneOfType","string","number","operatorValue","any","oneOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport Chip from '@mui/material/Chip';\nimport TextField from '@mui/material/TextField';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { getValueFromOption } from './filterPanelUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst isOptionEqualToValue = (option, value) => getValueFromOption(option) === getValueFromOption(value);\n\nconst filter = createFilterOptions();\n\nfunction GridFilterInputMultipleSingleSelect(props) {\n  const {\n    item,\n    applyValue,\n    apiRef,\n    focusElementRef\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const id = useId();\n  const resolvedColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;\n  const resolvedValueOptions = React.useMemo(() => {\n    return typeof (resolvedColumn == null ? void 0 : resolvedColumn.valueOptions) === 'function' ? resolvedColumn.valueOptions({\n      field: resolvedColumn.field\n    }) : resolvedColumn == null ? void 0 : resolvedColumn.valueOptions;\n  }, [resolvedColumn]);\n  const resolvedFormattedValueOptions = React.useMemo(() => {\n    return resolvedValueOptions == null ? void 0 : resolvedValueOptions.map(getValueFromOption);\n  }, [resolvedValueOptions]);\n  const {\n    valueFormatter,\n    field\n  } = apiRef.current.getColumn(item.columnField);\n\n  const filterValueOptionFormatter = option => {\n    if (typeof option === 'object') {\n      return option.label;\n    }\n\n    return valueFormatter && option !== '' ? valueFormatter({\n      value: option,\n      field,\n      api: apiRef.current\n    }) : option;\n  }; // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useState, the Autocomplete could receive incoherent value and options\n\n\n  const filterValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n\n    if (resolvedValueOptions !== undefined) {\n      const itemValueIndexes = item.value.map(element => {\n        // get the index matching between values and valueoptions\n        const formattedElement = getValueFromOption(element);\n        const index = (resolvedFormattedValueOptions == null ? void 0 : resolvedFormattedValueOptions.findIndex(formatedOption => formatedOption === formattedElement)) || 0;\n        return index;\n      });\n      return itemValueIndexes.filter(index => index >= 0).map(index => resolvedValueOptions[index]);\n    }\n\n    return item.value;\n  }, [item.value, resolvedValueOptions, resolvedFormattedValueOptions]);\n  React.useEffect(() => {\n    if (!Array.isArray(item.value) || filterValues.length !== item.value.length) {\n      // update the state if the filter value has been cleaned by the component\n      applyValue(_extends({}, item, {\n        value: filterValues.map(getValueFromOption)\n      }));\n    }\n  }, [item, filterValues, applyValue]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: [...value.map(getValueFromOption)]\n    }));\n  }, [applyValue, item]);\n  return /*#__PURE__*/_jsx(Autocomplete, _extends({\n    multiple: true,\n    freeSolo: false,\n    limitTags: 1,\n    options: resolvedValueOptions // TODO: avoid `any`?\n    ,\n    isOptionEqualToValue: isOptionEqualToValue,\n    filterOptions: filter,\n    id: id,\n    value: filterValues,\n    onChange: handleChange,\n    renderTags: (value, getTagProps) => value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n      variant: \"outlined\",\n      size: \"small\",\n      label: filterValueOptionFormatter(option)\n    }, getTagProps({\n      index\n    })))),\n    renderInput: params => /*#__PURE__*/_jsx(TextField, _extends({}, params, {\n      label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n      placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n      InputLabelProps: _extends({}, params.InputLabelProps, {\n        shrink: true\n      }),\n      inputRef: focusElementRef,\n      type: 'singleSelect',\n      variant: \"standard\"\n    }))\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.func, PropTypes.object]),\n  item: PropTypes.shape({\n    columnField: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operatorValue: PropTypes.string,\n    value: PropTypes.any\n  }).isRequired,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };"]},"metadata":{},"sourceType":"module"}